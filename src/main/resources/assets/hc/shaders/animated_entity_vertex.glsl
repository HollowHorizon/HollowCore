#version 150

//in - то что поступает через Tesselator или же из VBO
in vec3 Position; //координаты текущей вершины
in vec4 Color; //цвет

//координаты точки на текстуре
in vec2 UV0;//(условно есть модель лица игрока и для каждой точки в пространстве берётся точка на текстуре, а потом opengl уже сам натягивает текстуру)
in ivec2 UV1; //координаты света (на световой текстуре) - подробнее ниже
in ivec2 UV2; //координаты оверлея (на текстуре оверлея) - подробнее ниже

in vec3 Normal; //нормаль, какая-то хрень, которая вычисляется в PoseStack и отвечает за правильное освещение граней

uniform sampler2D Sampler1; //текстура света (просто градиент 16x16, где слева вверху чёрный, а справа внизу - белый)
uniform sampler2D Sampler2; //текстура оверлея, как я понял - красный оверлей при ударе моба, вероятно тоже что и текстура света, но вместо белого - красный

//Вот с этими двумя могу ошибаться, т.к. сам не до конца уверен
//т.к. ты вероятно не знаешь как работают матрицы (первый курс, хуле), считай что матрица - это функция: `Vec3 transform(Vec3, Mat4)`, хоть это и не верное определение
uniform mat4 ModelViewMat; //Матрица экранного пространства - функция, которая перемещает каждую точку так, как было в PoseStack
uniform mat4 ProjMat; //Матрица проекции - функция, которая переводит точку из 3D мира в 2D картинку, которую выведет на экран

uniform mat3 IViewRotMat; //Поворот камеры по 3 осям
uniform int FogShape; //не уверен, но вроде расстояние до тумана, хотя хрен знает нахуя он для энтити... Может моджанги туда всякой хуйни тернарными операторами захуярили

//По сути тот самый packedLight потом разбивается на 2 переменные (да-да, тернарные операторы)
uniform vec3 Light0_Direction; //свет 1
uniform vec3 Light1_Direction; //свет 2

//out - значит перейдёт в fragment шейдер (пиксельный)
out float vertexDistance; //какая-то хрень... может нужна чтобы потом понимать, нужно ли рисовать пиксель, вдруг он за туманом
out vec4 vertexColor; //цвет вершины
out vec4 lightMapColor; //свет
out vec4 overlayColor; //оверлей или же красная хрень, когда моба ждёшь
out vec2 texCoord0; //координаты текстуры которая будет перекрашиваться
out vec4 normal; //нормаль, крч вектор противоположенный грани

void main() {
	gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0); //находим положение вершины моба моба уже на экране вроде как

	vertexDistance = fog_distance(ModelViewMat, IViewRotMat * Position, FogShape); //функция моджангов, поэтому подсказать не могу, среде она тоже не нравится
	vertexColor = minecraft_mix_light(Light0_Direction, Light1_Direction, Normal, Color); //функция моджангов, поэтому подсказать не могу, среде она тоже не нравится
	lightMapColor = texelFetch(Sampler2, UV2 / 16, 0); //освещение в текущей точке, как и писал, там текстура - 16 пикселей, а в opengl указывать надо в процентах
	overlayColor = texelFetch(Sampler1, UV1, 0); //красный оверлей
	texCoord0 = UV0; //координаты текстуры передаём в шейдер
	normal = ProjMat * ModelViewMat * vec4(Normal, 0.0); //перерасчитываем нормаль относительно экрана
}
