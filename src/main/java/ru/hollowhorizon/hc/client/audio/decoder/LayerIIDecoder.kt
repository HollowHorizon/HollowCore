package ru.hollowhorizon.hc.client.audio.decoder

class LayerIIDecoder : LayerIDecoder(), FrameDecoder {
    override fun createSubbands() {
        var i: Int
        when (mode) {
            Header.SINGLE_CHANNEL -> {
                i = 0
                while (i < numSubbands) {
                    subbands[i] = SubbandLayer2(i)
                    ++i
                }
            }

            Header.JOINT_STEREO -> {
                i = 0
                while (i < header.intensityStereoBound()) {
                    subbands[i] = SubbandLayer2Stereo(i)
                    ++i
                }
                while (i < numSubbands) {
                    subbands[i] = SubbandLayer2IntensityStereo(i)
                    ++i
                }
            }

            else -> {
                i = 0
                while (i < numSubbands) {
                    subbands[i] = SubbandLayer2Stereo(i)
                    ++i
                }
            }
        }
    }

    override fun readScaleFactorSelection() {
        for (i in 0 until numSubbands) (subbands[i] as SubbandLayer2).readScalefactorSelection(stream, crc)
    }

    internal open class SubbandLayer2(protected var subbandnumber: Int) : Subband() {
        protected var allocation: Int = 0
        protected var scfsi: Int = 0
        protected var scalefactor1: Float = 0f
        protected var scalefactor2: Float = 0f
        protected var scalefactor3: Float = 0f
        private var codelength: IntArray = intArrayOf(0)
        protected var groupingtable: Array<FloatArray?> = arrayOfNulls(2)

        private var factor: FloatArray = floatArrayOf(0.0f)
        protected var groupnumber = 0
        protected var samplenumber = 0
        protected var samples: FloatArray = FloatArray(3)
        protected var c: FloatArray = floatArrayOf(0f)
        protected var d: FloatArray = floatArrayOf(0f)

        protected fun getAllocationlength(header: Header): Int {
            if (header.version() == Header.MPEG1) {
                var channelBitrate = header.bitrateIndex()

                if (header.mode() != Header.SINGLE_CHANNEL) if (channelBitrate == 4) channelBitrate = 1
                else channelBitrate -= 4

                return if (channelBitrate == 1 || channelBitrate == 2)
                    if (subbandnumber <= 1) 4
                    else 3
                else
                    if (subbandnumber <= 10) 4
                    else if (subbandnumber <= 22) 3
                    else 2
            } else
                if (subbandnumber <= 3) return 4
                else if (subbandnumber <= 10) return 3
                else return 2
        }

        protected fun prepareSampleReading(
            header: Header?, allocation: Int,
            channel: Int, factor: FloatArray, codelength: IntArray, c: FloatArray, d: FloatArray,
        ) {
            var channelBitrate = header!!.bitrateIndex()
            if (header.mode() != Header.SINGLE_CHANNEL) if (channelBitrate == 4) channelBitrate = 1
            else channelBitrate -= 4

            if (channelBitrate == 1 || channelBitrate == 2) {
                // table 3-B.2c or 3-B.2d
                groupingtable[channel] = table_cd_groupingtables[allocation]
                factor[0] = table_cd_factor[allocation]
                codelength[0] = table_cd_codelength[allocation]
                c[0] = table_cd_c[allocation]
                d[0] = table_cd_d[allocation]
            } else  // tables 3-B.2a or 3-B.2b
                if (subbandnumber <= 2) {
                    groupingtable[channel] = table_ab1_groupingtables[allocation]
                    factor[0] = table_ab1_factor[allocation]
                    codelength[0] = table_ab1_codelength[allocation]
                    c[0] = table_ab1_c[allocation]
                    d[0] = table_ab1_d[allocation]
                } else {
                    groupingtable[channel] = table_ab234_groupingtables[allocation]
                    if (subbandnumber <= 10) {
                        factor[0] = table_ab2_factor[allocation]
                        codelength[0] = table_ab2_codelength[allocation]
                        c[0] = table_ab2_c[allocation]
                        d[0] = table_ab2_d[allocation]
                    } else if (subbandnumber <= 22) {
                        factor[0] = table_ab3_factor[allocation]
                        codelength[0] = table_ab3_codelength[allocation]
                        c[0] = table_ab3_c[allocation]
                        d[0] = table_ab3_d[allocation]
                    } else {
                        factor[0] = table_ab4_factor[allocation]
                        codelength[0] = table_ab4_codelength[allocation]
                        c[0] = table_ab4_c[allocation]
                        d[0] = table_ab4_d[allocation]
                    }
                }
        }

        /**
         *
         */
        override fun readAllocation(stream: Bitstream, header: Header, crc: Crc16) {
            val length = getAllocationlength(header)
            allocation = stream.get_bits(length)
            crc.addBits(allocation, length)
        }

        /**
         *
         */
        open fun readScalefactorSelection(stream: Bitstream, crc: Crc16) {
            if (allocation != 0) {
                scfsi = stream.get_bits(2)
                crc.addBits(scfsi, 2)
            }
        }

        /**
         *
         */
        override fun readScalefactor(stream: Bitstream, header: Header) {
            if (allocation != 0) {
                when (scfsi) {
                    0 -> {
                        scalefactor1 = scalefactors[stream.get_bits(6)]
                        scalefactor2 = scalefactors[stream.get_bits(6)]
                        scalefactor3 = scalefactors[stream.get_bits(6)]
                    }

                    1 -> {
                        run {
                            scalefactor2 = scalefactors[stream.get_bits(6)]
                            scalefactor1 = scalefactor2
                        }
                        scalefactor3 = scalefactors[stream.get_bits(6)]
                    }

                    2 -> {
                        scalefactor3 = scalefactors[stream.get_bits(6)]
                        scalefactor2 = scalefactor3
                        scalefactor1 = scalefactor2
                    }

                    3 -> {
                        scalefactor1 = scalefactors[stream.get_bits(6)]
                        run {
                            scalefactor3 = scalefactors[stream.get_bits(6)]
                            scalefactor2 = scalefactor3
                        }
                    }
                }
                prepareSampleReading(header, allocation, 0, factor, codelength, c, d)
            }
        }

        override fun readSampleData(stream: Bitstream): Boolean {
            if (allocation != 0) if (groupingtable[0] != null) {
                var samplecode = stream.get_bits(codelength[0])
                samplecode += samplecode shl 1
                val target = samples
                val source = groupingtable[0]
                var tmp = 0
                var temp = samplecode

                if (temp > source!!.size - 3) temp = source.size - 3

                target[tmp] = source[temp]
                temp++
                tmp++
                target[tmp] = source[temp]
                temp++
                tmp++
                target[tmp] = source[temp]

            } else {
                samples[0] = (stream.get_bits(codelength[0]) * factor[0] - 1.0).toFloat()
                samples[1] = (stream.get_bits(codelength[0]) * factor[0] - 1.0).toFloat()
                samples[2] = (stream.get_bits(codelength[0]) * factor[0] - 1.0).toFloat()
            }

            samplenumber = 0
            return ++groupnumber == 12
        }

        /**
         *
         */
        override fun putNextSample(channels: Int, filter1: SynthesisFilter, filter2: SynthesisFilter): Boolean {
            if (allocation != 0 && channels != OutputChannels.RIGHT_CHANNEL) {
                var sample = samples[samplenumber]

                if (groupingtable[0] == null) sample = (sample + d[0]) * c[0]
                sample *= if (groupnumber <= 4) scalefactor1
                else if (groupnumber <= 8) scalefactor2
                else scalefactor3
                filter1.inputSample(sample, subbandnumber)
            }

            return ++samplenumber == 3
        }

        companion object {
            private val grouping_5bits: FloatArray = floatArrayOf(
                -2.0f / 3.0f,
                -2.0f / 3.0f,
                -2.0f / 3.0f,
                0.0f,
                -2.0f / 3.0f,
                -2.0f / 3.0f,
                2.0f / 3.0f,
                -2.0f / 3.0f,
                -2.0f / 3.0f,
                -2.0f / 3.0f,
                0.0f,
                -2.0f / 3.0f,
                0.0f,
                0.0f,
                -2.0f / 3.0f,
                2.0f / 3.0f,
                0.0f,
                -2.0f / 3.0f,
                -2.0f / 3.0f,
                2.0f / 3.0f,
                -2.0f / 3.0f,
                0.0f,
                2.0f / 3.0f,
                -2.0f / 3.0f,
                2.0f / 3.0f,
                2.0f / 3.0f,
                -2.0f / 3.0f,
                -2.0f / 3.0f,
                -2.0f / 3.0f,
                0.0f,
                0.0f,
                -2.0f / 3.0f,
                0.0f,
                2.0f / 3.0f,
                -2.0f / 3.0f,
                0.0f,
                -2.0f / 3.0f,
                0.0f,
                0.0f,
                0.0f,
                0.0f,
                0.0f,
                2.0f / 3.0f,
                0.0f,
                0.0f,
                -2.0f / 3.0f,
                2.0f / 3.0f,
                0.0f,
                0.0f,
                2.0f / 3.0f,
                0.0f,
                2.0f / 3.0f,
                2.0f / 3.0f,
                0.0f,
                -2.0f / 3.0f,
                -2.0f / 3.0f,
                2.0f / 3.0f,
                0.0f,
                -2.0f / 3.0f,
                2.0f / 3.0f,
                2.0f / 3.0f,
                -2.0f / 3.0f,
                2.0f / 3.0f,
                -2.0f / 3.0f,
                0.0f,
                2.0f / 3.0f,
                0.0f,
                0.0f,
                2.0f / 3.0f,
                2.0f / 3.0f,
                0.0f,
                2.0f / 3.0f,
                -2.0f / 3.0f,
                2.0f / 3.0f,
                2.0f / 3.0f,
                0.0f,
                2.0f / 3.0f,
                2.0f / 3.0f,
                2.0f / 3.0f,
                2.0f / 3.0f,
                2.0f / 3.0f
            )

            private val grouping_7bits: FloatArray = floatArrayOf(
                -0.8f,
                -0.8f,
                -0.8f,
                -0.4f,
                -0.8f,
                -0.8f,
                0.0f,
                -0.8f,
                -0.8f,
                0.4f,
                -0.8f,
                -0.8f,
                0.8f,
                -0.8f,
                -0.8f,
                -0.8f,
                -0.4f,
                -0.8f,
                -0.4f,
                -0.4f,
                -0.8f,
                0.0f,
                -0.4f,
                -0.8f,
                0.4f,
                -0.4f,
                -0.8f,
                0.8f,
                -0.4f,
                -0.8f,
                -0.8f,
                0.0f,
                -0.8f,
                -0.4f,
                0.0f,
                -0.8f,
                0.0f,
                0.0f,
                -0.8f,
                0.4f,
                0.0f,
                -0.8f,
                0.8f,
                0.0f,
                -0.8f,
                -0.8f,
                0.4f,
                -0.8f,
                -0.4f,
                0.4f,
                -0.8f,
                0.0f,
                0.4f,
                -0.8f,
                0.4f,
                0.4f,
                -0.8f,
                0.8f,
                0.4f,
                -0.8f,
                -0.8f,
                0.8f,
                -0.8f,
                -0.4f,
                0.8f,
                -0.8f,
                0.0f,
                0.8f,
                -0.8f,
                0.4f,
                0.8f,
                -0.8f,
                0.8f,
                0.8f,
                -0.8f,
                -0.8f,
                -0.8f,
                -0.4f,
                -0.4f,
                -0.8f,
                -0.4f,
                0.0f,
                -0.8f,
                -0.4f,
                0.4f,
                -0.8f,
                -0.4f,
                0.8f,
                -0.8f,
                -0.4f,
                -0.8f,
                -0.4f,
                -0.4f,
                -0.4f,
                -0.4f,
                -0.4f,
                0.0f,
                -0.4f,
                -0.4f,
                0.4f,
                -0.4f,
                -0.4f,
                0.8f,
                -0.4f,
                -0.4f,
                -0.8f,
                0.0f,
                -0.4f,
                -0.4f,
                0.0f,
                -0.4f,
                0.0f,
                0.0f,
                -0.4f,
                0.4f,
                0.0f,
                -0.4f,
                0.8f,
                0.0f,
                -0.4f,
                -0.8f,
                0.4f,
                -0.4f,
                -0.4f,
                0.4f,
                -0.4f,
                0.0f,
                0.4f,
                -0.4f,
                0.4f,
                0.4f,
                -0.4f,
                0.8f,
                0.4f,
                -0.4f,
                -0.8f,
                0.8f,
                -0.4f,
                -0.4f,
                0.8f,
                -0.4f,
                0.0f,
                0.8f,
                -0.4f,
                0.4f,
                0.8f,
                -0.4f,
                0.8f,
                0.8f,
                -0.4f,
                -0.8f,
                -0.8f,
                0.0f,
                -0.4f,
                -0.8f,
                0.0f,
                0.0f,
                -0.8f,
                0.0f,
                0.4f,
                -0.8f,
                0.0f,
                0.8f,
                -0.8f,
                0.0f,
                -0.8f,
                -0.4f,
                0.0f,
                -0.4f,
                -0.4f,
                0.0f,
                0.0f,
                -0.4f,
                0.0f,
                0.4f,
                -0.4f,
                0.0f,
                0.8f,
                -0.4f,
                0.0f,
                -0.8f,
                0.0f,
                0.0f,
                -0.4f,
                0.0f,
                0.0f,
                0.0f,
                0.0f,
                0.0f,
                0.4f,
                0.0f,
                0.0f,
                0.8f,
                0.0f,
                0.0f,
                -0.8f,
                0.4f,
                0.0f,
                -0.4f,
                0.4f,
                0.0f,
                0.0f,
                0.4f,
                0.0f,
                0.4f,
                0.4f,
                0.0f,
                0.8f,
                0.4f,
                0.0f,
                -0.8f,
                0.8f,
                0.0f,
                -0.4f,
                0.8f,
                0.0f,
                0.0f,
                0.8f,
                0.0f,
                0.4f,
                0.8f,
                0.0f,
                0.8f,
                0.8f,
                0.0f,
                -0.8f,
                -0.8f,
                0.4f,
                -0.4f,
                -0.8f,
                0.4f,
                0.0f,
                -0.8f,
                0.4f,
                0.4f,
                -0.8f,
                0.4f,
                0.8f,
                -0.8f,
                0.4f,
                -0.8f,
                -0.4f,
                0.4f,
                -0.4f,
                -0.4f,
                0.4f,
                0.0f,
                -0.4f,
                0.4f,
                0.4f,
                -0.4f,
                0.4f,
                0.8f,
                -0.4f,
                0.4f,
                -0.8f,
                0.0f,
                0.4f,
                -0.4f,
                0.0f,
                0.4f,
                0.0f,
                0.0f,
                0.4f,
                0.4f,
                0.0f,
                0.4f,
                0.8f,
                0.0f,
                0.4f,
                -0.8f,
                0.4f,
                0.4f,
                -0.4f,
                0.4f,
                0.4f,
                0.0f,
                0.4f,
                0.4f,
                0.4f,
                0.4f,
                0.4f,
                0.8f,
                0.4f,
                0.4f,
                -0.8f,
                0.8f,
                0.4f,
                -0.4f,
                0.8f,
                0.4f,
                0.0f,
                0.8f,
                0.4f,
                0.4f,
                0.8f,
                0.4f,
                0.8f,
                0.8f,
                0.4f,
                -0.8f,
                -0.8f,
                0.8f,
                -0.4f,
                -0.8f,
                0.8f,
                0.0f,
                -0.8f,
                0.8f,
                0.4f,
                -0.8f,
                0.8f,
                0.8f,
                -0.8f,
                0.8f,
                -0.8f,
                -0.4f,
                0.8f,
                -0.4f,
                -0.4f,
                0.8f,
                0.0f,
                -0.4f,
                0.8f,
                0.4f,
                -0.4f,
                0.8f,
                0.8f,
                -0.4f,
                0.8f,
                -0.8f,
                0.0f,
                0.8f,
                -0.4f,
                0.0f,
                0.8f,
                0.0f,
                0.0f,
                0.8f,
                0.4f,
                0.0f,
                0.8f,
                0.8f,
                0.0f,
                0.8f,
                -0.8f,
                0.4f,
                0.8f,
                -0.4f,
                0.4f,
                0.8f,
                0.0f,
                0.4f,
                0.8f,
                0.4f,
                0.4f,
                0.8f,
                0.8f,
                0.4f,
                0.8f,
                -0.8f,
                0.8f,
                0.8f,
                -0.4f,
                0.8f,
                0.8f,
                0.0f,
                0.8f,
                0.8f,
                0.4f,
                0.8f,
                0.8f,
                0.8f,
                0.8f,
                0.8f
            )

            private val grouping_10bits: FloatArray = floatArrayOf(
                -8.0f / 9.0f,
                -8.0f / 9.0f,
                -8.0f / 9.0f,
                -6.0f / 9.0f,
                -8.0f / 9.0f,
                -8.0f / 9.0f,
                -4.0f / 9.0f,
                -8.0f / 9.0f,
                -8.0f / 9.0f,
                -2.0f / 9.0f,
                -8.0f / 9.0f,
                -8.0f / 9.0f,
                0.0f,
                -8.0f / 9.0f,
                -8.0f / 9.0f,
                2.0f / 9.0f,
                -8.0f / 9.0f,
                -8.0f / 9.0f,
                4.0f / 9.0f,
                -8.0f / 9.0f,
                -8.0f / 9.0f,
                6.0f / 9.0f,
                -8.0f / 9.0f,
                -8.0f / 9.0f,
                8.0f / 9.0f,
                -8.0f / 9.0f,
                -8.0f / 9.0f,
                -8.0f / 9.0f,
                -6.0f / 9.0f,
                -8.0f / 9.0f,
                -6.0f / 9.0f,
                -6.0f / 9.0f,
                -8.0f / 9.0f,
                -4.0f / 9.0f,
                -6.0f / 9.0f,
                -8.0f / 9.0f,
                -2.0f / 9.0f,
                -6.0f / 9.0f,
                -8.0f / 9.0f,
                0.0f,
                -6.0f / 9.0f,
                -8.0f / 9.0f,
                2.0f / 9.0f,
                -6.0f / 9.0f,
                -8.0f / 9.0f,
                4.0f / 9.0f,
                -6.0f / 9.0f,
                -8.0f / 9.0f,
                6.0f / 9.0f,
                -6.0f / 9.0f,
                -8.0f / 9.0f,
                8.0f / 9.0f,
                -6.0f / 9.0f,
                -8.0f / 9.0f,
                -8.0f / 9.0f,
                -4.0f / 9.0f,
                -8.0f / 9.0f,
                -6.0f / 9.0f,
                -4.0f / 9.0f,
                -8.0f / 9.0f,
                -4.0f / 9.0f,
                -4.0f / 9.0f,
                -8.0f / 9.0f,
                -2.0f / 9.0f,
                -4.0f / 9.0f,
                -8.0f / 9.0f,
                0.0f,
                -4.0f / 9.0f,
                -8.0f / 9.0f,
                2.0f / 9.0f,
                -4.0f / 9.0f,
                -8.0f / 9.0f,
                4.0f / 9.0f,
                -4.0f / 9.0f,
                -8.0f / 9.0f,
                6.0f / 9.0f,
                -4.0f / 9.0f,
                -8.0f / 9.0f,
                8.0f / 9.0f,
                -4.0f / 9.0f,
                -8.0f / 9.0f,
                -8.0f / 9.0f,
                -2.0f / 9.0f,
                -8.0f / 9.0f,
                -6.0f / 9.0f,
                -2.0f / 9.0f,
                -8.0f / 9.0f,
                -4.0f / 9.0f,
                -2.0f / 9.0f,
                -8.0f / 9.0f,
                -2.0f / 9.0f,
                -2.0f / 9.0f,
                -8.0f / 9.0f,
                0.0f,
                -2.0f / 9.0f,
                -8.0f / 9.0f,
                2.0f / 9.0f,
                -2.0f / 9.0f,
                -8.0f / 9.0f,
                4.0f / 9.0f,
                -2.0f / 9.0f,
                -8.0f / 9.0f,
                6.0f / 9.0f,
                -2.0f / 9.0f,
                -8.0f / 9.0f,
                8.0f / 9.0f,
                -2.0f / 9.0f,
                -8.0f / 9.0f,
                -8.0f / 9.0f,
                0.0f,
                -8.0f / 9.0f,
                -6.0f / 9.0f,
                0.0f,
                -8.0f / 9.0f,
                -4.0f / 9.0f,
                0.0f,
                -8.0f / 9.0f,
                -2.0f / 9.0f,
                0.0f,
                -8.0f / 9.0f,
                0.0f,
                0.0f,
                -8.0f / 9.0f,
                2.0f / 9.0f,
                0.0f,
                -8.0f / 9.0f,
                4.0f / 9.0f,
                0.0f,
                -8.0f / 9.0f,
                6.0f / 9.0f,
                0.0f,
                -8.0f / 9.0f,
                8.0f / 9.0f,
                0.0f,
                -8.0f / 9.0f,
                -8.0f / 9.0f,
                2.0f / 9.0f,
                -8.0f / 9.0f,
                -6.0f / 9.0f,
                2.0f / 9.0f,
                -8.0f / 9.0f,
                -4.0f / 9.0f,
                2.0f / 9.0f,
                -8.0f / 9.0f,
                -2.0f / 9.0f,
                2.0f / 9.0f,
                -8.0f / 9.0f,
                0.0f,
                2.0f / 9.0f,
                -8.0f / 9.0f,
                2.0f / 9.0f,
                2.0f / 9.0f,
                -8.0f / 9.0f,
                4.0f / 9.0f,
                2.0f / 9.0f,
                -8.0f / 9.0f,
                6.0f / 9.0f,
                2.0f / 9.0f,
                -8.0f / 9.0f,
                8.0f / 9.0f,
                2.0f / 9.0f,
                -8.0f / 9.0f,
                -8.0f / 9.0f,
                4.0f / 9.0f,
                -8.0f / 9.0f,
                -6.0f / 9.0f,
                4.0f / 9.0f,
                -8.0f / 9.0f,
                -4.0f / 9.0f,
                4.0f / 9.0f,
                -8.0f / 9.0f,
                -2.0f / 9.0f,
                4.0f / 9.0f,
                -8.0f / 9.0f,
                0.0f,
                4.0f / 9.0f,
                -8.0f / 9.0f,
                2.0f / 9.0f,
                4.0f / 9.0f,
                -8.0f / 9.0f,
                4.0f / 9.0f,
                4.0f / 9.0f,
                -8.0f / 9.0f,
                6.0f / 9.0f,
                4.0f / 9.0f,
                -8.0f / 9.0f,
                8.0f / 9.0f,
                4.0f / 9.0f,
                -8.0f / 9.0f,
                -8.0f / 9.0f,
                6.0f / 9.0f,
                -8.0f / 9.0f,
                -6.0f / 9.0f,
                6.0f / 9.0f,
                -8.0f / 9.0f,
                -4.0f / 9.0f,
                6.0f / 9.0f,
                -8.0f / 9.0f,
                -2.0f / 9.0f,
                6.0f / 9.0f,
                -8.0f / 9.0f,
                0.0f,
                6.0f / 9.0f,
                -8.0f / 9.0f,
                2.0f / 9.0f,
                6.0f / 9.0f,
                -8.0f / 9.0f,
                4.0f / 9.0f,
                6.0f / 9.0f,
                -8.0f / 9.0f,
                6.0f / 9.0f,
                6.0f / 9.0f,
                -8.0f / 9.0f,
                8.0f / 9.0f,
                6.0f / 9.0f,
                -8.0f / 9.0f,
                -8.0f / 9.0f,
                8.0f / 9.0f,
                -8.0f / 9.0f,
                -6.0f / 9.0f,
                8.0f / 9.0f,
                -8.0f / 9.0f,
                -4.0f / 9.0f,
                8.0f / 9.0f,
                -8.0f / 9.0f,
                -2.0f / 9.0f,
                8.0f / 9.0f,
                -8.0f / 9.0f,
                0.0f,
                8.0f / 9.0f,
                -8.0f / 9.0f,
                2.0f / 9.0f,
                8.0f / 9.0f,
                -8.0f / 9.0f,
                4.0f / 9.0f,
                8.0f / 9.0f,
                -8.0f / 9.0f,
                6.0f / 9.0f,
                8.0f / 9.0f,
                -8.0f / 9.0f,
                8.0f / 9.0f,
                8.0f / 9.0f,
                -8.0f / 9.0f,
                -8.0f / 9.0f,
                -8.0f / 9.0f,
                -6.0f / 9.0f,
                -6.0f / 9.0f,
                -8.0f / 9.0f,
                -6.0f / 9.0f,
                -4.0f / 9.0f,
                -8.0f / 9.0f,
                -6.0f / 9.0f,
                -2.0f / 9.0f,
                -8.0f / 9.0f,
                -6.0f / 9.0f,
                0.0f,
                -8.0f / 9.0f,
                -6.0f / 9.0f,
                2.0f / 9.0f,
                -8.0f / 9.0f,
                -6.0f / 9.0f,
                4.0f / 9.0f,
                -8.0f / 9.0f,
                -6.0f / 9.0f,
                6.0f / 9.0f,
                -8.0f / 9.0f,
                -6.0f / 9.0f,
                8.0f / 9.0f,
                -8.0f / 9.0f,
                -6.0f / 9.0f,
                -8.0f / 9.0f,
                -6.0f / 9.0f,
                -6.0f / 9.0f,
                -6.0f / 9.0f,
                -6.0f / 9.0f,
                -6.0f / 9.0f,
                -4.0f / 9.0f,
                -6.0f / 9.0f,
                -6.0f / 9.0f,
                -2.0f / 9.0f,
                -6.0f / 9.0f,
                -6.0f / 9.0f,
                0.0f,
                -6.0f / 9.0f,
                -6.0f / 9.0f,
                2.0f / 9.0f,
                -6.0f / 9.0f,
                -6.0f / 9.0f,
                4.0f / 9.0f,
                -6.0f / 9.0f,
                -6.0f / 9.0f,
                6.0f / 9.0f,
                -6.0f / 9.0f,
                -6.0f / 9.0f,
                8.0f / 9.0f,
                -6.0f / 9.0f,
                -6.0f / 9.0f,
                -8.0f / 9.0f,
                -4.0f / 9.0f,
                -6.0f / 9.0f,
                -6.0f / 9.0f,
                -4.0f / 9.0f,
                -6.0f / 9.0f,
                -4.0f / 9.0f,
                -4.0f / 9.0f,
                -6.0f / 9.0f,
                -2.0f / 9.0f,
                -4.0f / 9.0f,
                -6.0f / 9.0f,
                0.0f,
                -4.0f / 9.0f,
                -6.0f / 9.0f,
                2.0f / 9.0f,
                -4.0f / 9.0f,
                -6.0f / 9.0f,
                4.0f / 9.0f,
                -4.0f / 9.0f,
                -6.0f / 9.0f,
                6.0f / 9.0f,
                -4.0f / 9.0f,
                -6.0f / 9.0f,
                8.0f / 9.0f,
                -4.0f / 9.0f,
                -6.0f / 9.0f,
                -8.0f / 9.0f,
                -2.0f / 9.0f,
                -6.0f / 9.0f,
                -6.0f / 9.0f,
                -2.0f / 9.0f,
                -6.0f / 9.0f,
                -4.0f / 9.0f,
                -2.0f / 9.0f,
                -6.0f / 9.0f,
                -2.0f / 9.0f,
                -2.0f / 9.0f,
                -6.0f / 9.0f,
                0.0f,
                -2.0f / 9.0f,
                -6.0f / 9.0f,
                2.0f / 9.0f,
                -2.0f / 9.0f,
                -6.0f / 9.0f,
                4.0f / 9.0f,
                -2.0f / 9.0f,
                -6.0f / 9.0f,
                6.0f / 9.0f,
                -2.0f / 9.0f,
                -6.0f / 9.0f,
                8.0f / 9.0f,
                -2.0f / 9.0f,
                -6.0f / 9.0f,
                -8.0f / 9.0f,
                0.0f,
                -6.0f / 9.0f,
                -6.0f / 9.0f,
                0.0f,
                -6.0f / 9.0f,
                -4.0f / 9.0f,
                0.0f,
                -6.0f / 9.0f,
                -2.0f / 9.0f,
                0.0f,
                -6.0f / 9.0f,
                0.0f,
                0.0f,
                -6.0f / 9.0f,
                2.0f / 9.0f,
                0.0f,
                -6.0f / 9.0f,
                4.0f / 9.0f,
                0.0f,
                -6.0f / 9.0f,
                6.0f / 9.0f,
                0.0f,
                -6.0f / 9.0f,
                8.0f / 9.0f,
                0.0f,
                -6.0f / 9.0f,
                -8.0f / 9.0f,
                2.0f / 9.0f,
                -6.0f / 9.0f,
                -6.0f / 9.0f,
                2.0f / 9.0f,
                -6.0f / 9.0f,
                -4.0f / 9.0f,
                2.0f / 9.0f,
                -6.0f / 9.0f,
                -2.0f / 9.0f,
                2.0f / 9.0f,
                -6.0f / 9.0f,
                0.0f,
                2.0f / 9.0f,
                -6.0f / 9.0f,
                2.0f / 9.0f,
                2.0f / 9.0f,
                -6.0f / 9.0f,
                4.0f / 9.0f,
                2.0f / 9.0f,
                -6.0f / 9.0f,
                6.0f / 9.0f,
                2.0f / 9.0f,
                -6.0f / 9.0f,
                8.0f / 9.0f,
                2.0f / 9.0f,
                -6.0f / 9.0f,
                -8.0f / 9.0f,
                4.0f / 9.0f,
                -6.0f / 9.0f,
                -6.0f / 9.0f,
                4.0f / 9.0f,
                -6.0f / 9.0f,
                -4.0f / 9.0f,
                4.0f / 9.0f,
                -6.0f / 9.0f,
                -2.0f / 9.0f,
                4.0f / 9.0f,
                -6.0f / 9.0f,
                0.0f,
                4.0f / 9.0f,
                -6.0f / 9.0f,
                2.0f / 9.0f,
                4.0f / 9.0f,
                -6.0f / 9.0f,
                4.0f / 9.0f,
                4.0f / 9.0f,
                -6.0f / 9.0f,
                6.0f / 9.0f,
                4.0f / 9.0f,
                -6.0f / 9.0f,
                8.0f / 9.0f,
                4.0f / 9.0f,
                -6.0f / 9.0f,
                -8.0f / 9.0f,
                6.0f / 9.0f,
                -6.0f / 9.0f,
                -6.0f / 9.0f,
                6.0f / 9.0f,
                -6.0f / 9.0f,
                -4.0f / 9.0f,
                6.0f / 9.0f,
                -6.0f / 9.0f,
                -2.0f / 9.0f,
                6.0f / 9.0f,
                -6.0f / 9.0f,
                0.0f,
                6.0f / 9.0f,
                -6.0f / 9.0f,
                2.0f / 9.0f,
                6.0f / 9.0f,
                -6.0f / 9.0f,
                4.0f / 9.0f,
                6.0f / 9.0f,
                -6.0f / 9.0f,
                6.0f / 9.0f,
                6.0f / 9.0f,
                -6.0f / 9.0f,
                8.0f / 9.0f,
                6.0f / 9.0f,
                -6.0f / 9.0f,
                -8.0f / 9.0f,
                8.0f / 9.0f,
                -6.0f / 9.0f,
                -6.0f / 9.0f,
                8.0f / 9.0f,
                -6.0f / 9.0f,
                -4.0f / 9.0f,
                8.0f / 9.0f,
                -6.0f / 9.0f,
                -2.0f / 9.0f,
                8.0f / 9.0f,
                -6.0f / 9.0f,
                0.0f,
                8.0f / 9.0f,
                -6.0f / 9.0f,
                2.0f / 9.0f,
                8.0f / 9.0f,
                -6.0f / 9.0f,
                4.0f / 9.0f,
                8.0f / 9.0f,
                -6.0f / 9.0f,
                6.0f / 9.0f,
                8.0f / 9.0f,
                -6.0f / 9.0f,
                8.0f / 9.0f,
                8.0f / 9.0f,
                -6.0f / 9.0f,
                -8.0f / 9.0f,
                -8.0f / 9.0f,
                -4.0f / 9.0f,
                -6.0f / 9.0f,
                -8.0f / 9.0f,
                -4.0f / 9.0f,
                -4.0f / 9.0f,
                -8.0f / 9.0f,
                -4.0f / 9.0f,
                -2.0f / 9.0f,
                -8.0f / 9.0f,
                -4.0f / 9.0f,
                0.0f,
                -8.0f / 9.0f,
                -4.0f / 9.0f,
                2.0f / 9.0f,
                -8.0f / 9.0f,
                -4.0f / 9.0f,
                4.0f / 9.0f,
                -8.0f / 9.0f,
                -4.0f / 9.0f,
                6.0f / 9.0f,
                -8.0f / 9.0f,
                -4.0f / 9.0f,
                8.0f / 9.0f,
                -8.0f / 9.0f,
                -4.0f / 9.0f,
                -8.0f / 9.0f,
                -6.0f / 9.0f,
                -4.0f / 9.0f,
                -6.0f / 9.0f,
                -6.0f / 9.0f,
                -4.0f / 9.0f,
                -4.0f / 9.0f,
                -6.0f / 9.0f,
                -4.0f / 9.0f,
                -2.0f / 9.0f,
                -6.0f / 9.0f,
                -4.0f / 9.0f,
                0.0f,
                -6.0f / 9.0f,
                -4.0f / 9.0f,
                2.0f / 9.0f,
                -6.0f / 9.0f,
                -4.0f / 9.0f,
                4.0f / 9.0f,
                -6.0f / 9.0f,
                -4.0f / 9.0f,
                6.0f / 9.0f,
                -6.0f / 9.0f,
                -4.0f / 9.0f,
                8.0f / 9.0f,
                -6.0f / 9.0f,
                -4.0f / 9.0f,
                -8.0f / 9.0f,
                -4.0f / 9.0f,
                -4.0f / 9.0f,
                -6.0f / 9.0f,
                -4.0f / 9.0f,
                -4.0f / 9.0f,
                -4.0f / 9.0f,
                -4.0f / 9.0f,
                -4.0f / 9.0f,
                -2.0f / 9.0f,
                -4.0f / 9.0f,
                -4.0f / 9.0f,
                0.0f,
                -4.0f / 9.0f,
                -4.0f / 9.0f,
                2.0f / 9.0f,
                -4.0f / 9.0f,
                -4.0f / 9.0f,
                4.0f / 9.0f,
                -4.0f / 9.0f,
                -4.0f / 9.0f,
                6.0f / 9.0f,
                -4.0f / 9.0f,
                -4.0f / 9.0f,
                8.0f / 9.0f,
                -4.0f / 9.0f,
                -4.0f / 9.0f,
                -8.0f / 9.0f,
                -2.0f / 9.0f,
                -4.0f / 9.0f,
                -6.0f / 9.0f,
                -2.0f / 9.0f,
                -4.0f / 9.0f,
                -4.0f / 9.0f,
                -2.0f / 9.0f,
                -4.0f / 9.0f,
                -2.0f / 9.0f,
                -2.0f / 9.0f,
                -4.0f / 9.0f,
                0.0f,
                -2.0f / 9.0f,
                -4.0f / 9.0f,
                2.0f / 9.0f,
                -2.0f / 9.0f,
                -4.0f / 9.0f,
                4.0f / 9.0f,
                -2.0f / 9.0f,
                -4.0f / 9.0f,
                6.0f / 9.0f,
                -2.0f / 9.0f,
                -4.0f / 9.0f,
                8.0f / 9.0f,
                -2.0f / 9.0f,
                -4.0f / 9.0f,
                -8.0f / 9.0f,
                0.0f,
                -4.0f / 9.0f,
                -6.0f / 9.0f,
                0.0f,
                -4.0f / 9.0f,
                -4.0f / 9.0f,
                0.0f,
                -4.0f / 9.0f,
                -2.0f / 9.0f,
                0.0f,
                -4.0f / 9.0f,
                0.0f,
                0.0f,
                -4.0f / 9.0f,
                2.0f / 9.0f,
                0.0f,
                -4.0f / 9.0f,
                4.0f / 9.0f,
                0.0f,
                -4.0f / 9.0f,
                6.0f / 9.0f,
                0.0f,
                -4.0f / 9.0f,
                8.0f / 9.0f,
                0.0f,
                -4.0f / 9.0f,
                -8.0f / 9.0f,
                2.0f / 9.0f,
                -4.0f / 9.0f,
                -6.0f / 9.0f,
                2.0f / 9.0f,
                -4.0f / 9.0f,
                -4.0f / 9.0f,
                2.0f / 9.0f,
                -4.0f / 9.0f,
                -2.0f / 9.0f,
                2.0f / 9.0f,
                -4.0f / 9.0f,
                0.0f,
                2.0f / 9.0f,
                -4.0f / 9.0f,
                2.0f / 9.0f,
                2.0f / 9.0f,
                -4.0f / 9.0f,
                4.0f / 9.0f,
                2.0f / 9.0f,
                -4.0f / 9.0f,
                6.0f / 9.0f,
                2.0f / 9.0f,
                -4.0f / 9.0f,
                8.0f / 9.0f,
                2.0f / 9.0f,
                -4.0f / 9.0f,
                -8.0f / 9.0f,
                4.0f / 9.0f,
                -4.0f / 9.0f,
                -6.0f / 9.0f,
                4.0f / 9.0f,
                -4.0f / 9.0f,
                -4.0f / 9.0f,
                4.0f / 9.0f,
                -4.0f / 9.0f,
                -2.0f / 9.0f,
                4.0f / 9.0f,
                -4.0f / 9.0f,
                0.0f,
                4.0f / 9.0f,
                -4.0f / 9.0f,
                2.0f / 9.0f,
                4.0f / 9.0f,
                -4.0f / 9.0f,
                4.0f / 9.0f,
                4.0f / 9.0f,
                -4.0f / 9.0f,
                6.0f / 9.0f,
                4.0f / 9.0f,
                -4.0f / 9.0f,
                8.0f / 9.0f,
                4.0f / 9.0f,
                -4.0f / 9.0f,
                -8.0f / 9.0f,
                6.0f / 9.0f,
                -4.0f / 9.0f,
                -6.0f / 9.0f,
                6.0f / 9.0f,
                -4.0f / 9.0f,
                -4.0f / 9.0f,
                6.0f / 9.0f,
                -4.0f / 9.0f,
                -2.0f / 9.0f,
                6.0f / 9.0f,
                -4.0f / 9.0f,
                0.0f,
                6.0f / 9.0f,
                -4.0f / 9.0f,
                2.0f / 9.0f,
                6.0f / 9.0f,
                -4.0f / 9.0f,
                4.0f / 9.0f,
                6.0f / 9.0f,
                -4.0f / 9.0f,
                6.0f / 9.0f,
                6.0f / 9.0f,
                -4.0f / 9.0f,
                8.0f / 9.0f,
                6.0f / 9.0f,
                -4.0f / 9.0f,
                -8.0f / 9.0f,
                8.0f / 9.0f,
                -4.0f / 9.0f,
                -6.0f / 9.0f,
                8.0f / 9.0f,
                -4.0f / 9.0f,
                -4.0f / 9.0f,
                8.0f / 9.0f,
                -4.0f / 9.0f,
                -2.0f / 9.0f,
                8.0f / 9.0f,
                -4.0f / 9.0f,
                0.0f,
                8.0f / 9.0f,
                -4.0f / 9.0f,
                2.0f / 9.0f,
                8.0f / 9.0f,
                -4.0f / 9.0f,
                4.0f / 9.0f,
                8.0f / 9.0f,
                -4.0f / 9.0f,
                6.0f / 9.0f,
                8.0f / 9.0f,
                -4.0f / 9.0f,
                8.0f / 9.0f,
                8.0f / 9.0f,
                -4.0f / 9.0f,
                -8.0f / 9.0f,
                -8.0f / 9.0f,
                -2.0f / 9.0f,
                -6.0f / 9.0f,
                -8.0f / 9.0f,
                -2.0f / 9.0f,
                -4.0f / 9.0f,
                -8.0f / 9.0f,
                -2.0f / 9.0f,
                -2.0f / 9.0f,
                -8.0f / 9.0f,
                -2.0f / 9.0f,
                0.0f,
                -8.0f / 9.0f,
                -2.0f / 9.0f,
                2.0f / 9.0f,
                -8.0f / 9.0f,
                -2.0f / 9.0f,
                4.0f / 9.0f,
                -8.0f / 9.0f,
                -2.0f / 9.0f,
                6.0f / 9.0f,
                -8.0f / 9.0f,
                -2.0f / 9.0f,
                8.0f / 9.0f,
                -8.0f / 9.0f,
                -2.0f / 9.0f,
                -8.0f / 9.0f,
                -6.0f / 9.0f,
                -2.0f / 9.0f,
                -6.0f / 9.0f,
                -6.0f / 9.0f,
                -2.0f / 9.0f,
                -4.0f / 9.0f,
                -6.0f / 9.0f,
                -2.0f / 9.0f,
                -2.0f / 9.0f,
                -6.0f / 9.0f,
                -2.0f / 9.0f,
                0.0f,
                -6.0f / 9.0f,
                -2.0f / 9.0f,
                2.0f / 9.0f,
                -6.0f / 9.0f,
                -2.0f / 9.0f,
                4.0f / 9.0f,
                -6.0f / 9.0f,
                -2.0f / 9.0f,
                6.0f / 9.0f,
                -6.0f / 9.0f,
                -2.0f / 9.0f,
                8.0f / 9.0f,
                -6.0f / 9.0f,
                -2.0f / 9.0f,
                -8.0f / 9.0f,
                -4.0f / 9.0f,
                -2.0f / 9.0f,
                -6.0f / 9.0f,
                -4.0f / 9.0f,
                -2.0f / 9.0f,
                -4.0f / 9.0f,
                -4.0f / 9.0f,
                -2.0f / 9.0f,
                -2.0f / 9.0f,
                -4.0f / 9.0f,
                -2.0f / 9.0f,
                0.0f,
                -4.0f / 9.0f,
                -2.0f / 9.0f,
                2.0f / 9.0f,
                -4.0f / 9.0f,
                -2.0f / 9.0f,
                4.0f / 9.0f,
                -4.0f / 9.0f,
                -2.0f / 9.0f,
                6.0f / 9.0f,
                -4.0f / 9.0f,
                -2.0f / 9.0f,
                8.0f / 9.0f,
                -4.0f / 9.0f,
                -2.0f / 9.0f,
                -8.0f / 9.0f,
                -2.0f / 9.0f,
                -2.0f / 9.0f,
                -6.0f / 9.0f,
                -2.0f / 9.0f,
                -2.0f / 9.0f,
                -4.0f / 9.0f,
                -2.0f / 9.0f,
                -2.0f / 9.0f,
                -2.0f / 9.0f,
                -2.0f / 9.0f,
                -2.0f / 9.0f,
                0.0f,
                -2.0f / 9.0f,
                -2.0f / 9.0f,
                2.0f / 9.0f,
                -2.0f / 9.0f,
                -2.0f / 9.0f,
                4.0f / 9.0f,
                -2.0f / 9.0f,
                -2.0f / 9.0f,
                6.0f / 9.0f,
                -2.0f / 9.0f,
                -2.0f / 9.0f,
                8.0f / 9.0f,
                -2.0f / 9.0f,
                -2.0f / 9.0f,
                -8.0f / 9.0f,
                0.0f,
                -2.0f / 9.0f,
                -6.0f / 9.0f,
                0.0f,
                -2.0f / 9.0f,
                -4.0f / 9.0f,
                0.0f,
                -2.0f / 9.0f,
                -2.0f / 9.0f,
                0.0f,
                -2.0f / 9.0f,
                0.0f,
                0.0f,
                -2.0f / 9.0f,
                2.0f / 9.0f,
                0.0f,
                -2.0f / 9.0f,
                4.0f / 9.0f,
                0.0f,
                -2.0f / 9.0f,
                6.0f / 9.0f,
                0.0f,
                -2.0f / 9.0f,
                8.0f / 9.0f,
                0.0f,
                -2.0f / 9.0f,
                -8.0f / 9.0f,
                2.0f / 9.0f,
                -2.0f / 9.0f,
                -6.0f / 9.0f,
                2.0f / 9.0f,
                -2.0f / 9.0f,
                -4.0f / 9.0f,
                2.0f / 9.0f,
                -2.0f / 9.0f,
                -2.0f / 9.0f,
                2.0f / 9.0f,
                -2.0f / 9.0f,
                0.0f,
                2.0f / 9.0f,
                -2.0f / 9.0f,
                2.0f / 9.0f,
                2.0f / 9.0f,
                -2.0f / 9.0f,
                4.0f / 9.0f,
                2.0f / 9.0f,
                -2.0f / 9.0f,
                6.0f / 9.0f,
                2.0f / 9.0f,
                -2.0f / 9.0f,
                8.0f / 9.0f,
                2.0f / 9.0f,
                -2.0f / 9.0f,
                -8.0f / 9.0f,
                4.0f / 9.0f,
                -2.0f / 9.0f,
                -6.0f / 9.0f,
                4.0f / 9.0f,
                -2.0f / 9.0f,
                -4.0f / 9.0f,
                4.0f / 9.0f,
                -2.0f / 9.0f,
                -2.0f / 9.0f,
                4.0f / 9.0f,
                -2.0f / 9.0f,
                0.0f,
                4.0f / 9.0f,
                -2.0f / 9.0f,
                2.0f / 9.0f,
                4.0f / 9.0f,
                -2.0f / 9.0f,
                4.0f / 9.0f,
                4.0f / 9.0f,
                -2.0f / 9.0f,
                6.0f / 9.0f,
                4.0f / 9.0f,
                -2.0f / 9.0f,
                8.0f / 9.0f,
                4.0f / 9.0f,
                -2.0f / 9.0f,
                -8.0f / 9.0f,
                6.0f / 9.0f,
                -2.0f / 9.0f,
                -6.0f / 9.0f,
                6.0f / 9.0f,
                -2.0f / 9.0f,
                -4.0f / 9.0f,
                6.0f / 9.0f,
                -2.0f / 9.0f,
                -2.0f / 9.0f,
                6.0f / 9.0f,
                -2.0f / 9.0f,
                0.0f,
                6.0f / 9.0f,
                -2.0f / 9.0f,
                2.0f / 9.0f,
                6.0f / 9.0f,
                -2.0f / 9.0f,
                4.0f / 9.0f,
                6.0f / 9.0f,
                -2.0f / 9.0f,
                6.0f / 9.0f,
                6.0f / 9.0f,
                -2.0f / 9.0f,
                8.0f / 9.0f,
                6.0f / 9.0f,
                -2.0f / 9.0f,
                -8.0f / 9.0f,
                8.0f / 9.0f,
                -2.0f / 9.0f,
                -6.0f / 9.0f,
                8.0f / 9.0f,
                -2.0f / 9.0f,
                -4.0f / 9.0f,
                8.0f / 9.0f,
                -2.0f / 9.0f,
                -2.0f / 9.0f,
                8.0f / 9.0f,
                -2.0f / 9.0f,
                0.0f,
                8.0f / 9.0f,
                -2.0f / 9.0f,
                2.0f / 9.0f,
                8.0f / 9.0f,
                -2.0f / 9.0f,
                4.0f / 9.0f,
                8.0f / 9.0f,
                -2.0f / 9.0f,
                6.0f / 9.0f,
                8.0f / 9.0f,
                -2.0f / 9.0f,
                8.0f / 9.0f,
                8.0f / 9.0f,
                -2.0f / 9.0f,
                -8.0f / 9.0f,
                -8.0f / 9.0f,
                0.0f,
                -6.0f / 9.0f,
                -8.0f / 9.0f,
                0.0f,
                -4.0f / 9.0f,
                -8.0f / 9.0f,
                0.0f,
                -2.0f / 9.0f,
                -8.0f / 9.0f,
                0.0f,
                0.0f,
                -8.0f / 9.0f,
                0.0f,
                2.0f / 9.0f,
                -8.0f / 9.0f,
                0.0f,
                4.0f / 9.0f,
                -8.0f / 9.0f,
                0.0f,
                6.0f / 9.0f,
                -8.0f / 9.0f,
                0.0f,
                8.0f / 9.0f,
                -8.0f / 9.0f,
                0.0f,
                -8.0f / 9.0f,
                -6.0f / 9.0f,
                0.0f,
                -6.0f / 9.0f,
                -6.0f / 9.0f,
                0.0f,
                -4.0f / 9.0f,
                -6.0f / 9.0f,
                0.0f,
                -2.0f / 9.0f,
                -6.0f / 9.0f,
                0.0f,
                0.0f,
                -6.0f / 9.0f,
                0.0f,
                2.0f / 9.0f,
                -6.0f / 9.0f,
                0.0f,
                4.0f / 9.0f,
                -6.0f / 9.0f,
                0.0f,
                6.0f / 9.0f,
                -6.0f / 9.0f,
                0.0f,
                8.0f / 9.0f,
                -6.0f / 9.0f,
                0.0f,
                -8.0f / 9.0f,
                -4.0f / 9.0f,
                0.0f,
                -6.0f / 9.0f,
                -4.0f / 9.0f,
                0.0f,
                -4.0f / 9.0f,
                -4.0f / 9.0f,
                0.0f,
                -2.0f / 9.0f,
                -4.0f / 9.0f,
                0.0f,
                0.0f,
                -4.0f / 9.0f,
                0.0f,
                2.0f / 9.0f,
                -4.0f / 9.0f,
                0.0f,
                4.0f / 9.0f,
                -4.0f / 9.0f,
                0.0f,
                6.0f / 9.0f,
                -4.0f / 9.0f,
                0.0f,
                8.0f / 9.0f,
                -4.0f / 9.0f,
                0.0f,
                -8.0f / 9.0f,
                -2.0f / 9.0f,
                0.0f,
                -6.0f / 9.0f,
                -2.0f / 9.0f,
                0.0f,
                -4.0f / 9.0f,
                -2.0f / 9.0f,
                0.0f,
                -2.0f / 9.0f,
                -2.0f / 9.0f,
                0.0f,
                0.0f,
                -2.0f / 9.0f,
                0.0f,
                2.0f / 9.0f,
                -2.0f / 9.0f,
                0.0f,
                4.0f / 9.0f,
                -2.0f / 9.0f,
                0.0f,
                6.0f / 9.0f,
                -2.0f / 9.0f,
                0.0f,
                8.0f / 9.0f,
                -2.0f / 9.0f,
                0.0f,
                -8.0f / 9.0f,
                0.0f,
                0.0f,
                -6.0f / 9.0f,
                0.0f,
                0.0f,
                -4.0f / 9.0f,
                0.0f,
                0.0f,
                -2.0f / 9.0f,
                0.0f,
                0.0f,
                0.0f,
                0.0f,
                0.0f,
                2.0f / 9.0f,
                0.0f,
                0.0f,
                4.0f / 9.0f,
                0.0f,
                0.0f,
                6.0f / 9.0f,
                0.0f,
                0.0f,
                8.0f / 9.0f,
                0.0f,
                0.0f,
                -8.0f / 9.0f,
                2.0f / 9.0f,
                0.0f,
                -6.0f / 9.0f,
                2.0f / 9.0f,
                0.0f,
                -4.0f / 9.0f,
                2.0f / 9.0f,
                0.0f,
                -2.0f / 9.0f,
                2.0f / 9.0f,
                0.0f,
                0.0f,
                2.0f / 9.0f,
                0.0f,
                2.0f / 9.0f,
                2.0f / 9.0f,
                0.0f,
                4.0f / 9.0f,
                2.0f / 9.0f,
                0.0f,
                6.0f / 9.0f,
                2.0f / 9.0f,
                0.0f,
                8.0f / 9.0f,
                2.0f / 9.0f,
                0.0f,
                -8.0f / 9.0f,
                4.0f / 9.0f,
                0.0f,
                -6.0f / 9.0f,
                4.0f / 9.0f,
                0.0f,
                -4.0f / 9.0f,
                4.0f / 9.0f,
                0.0f,
                -2.0f / 9.0f,
                4.0f / 9.0f,
                0.0f,
                0.0f,
                4.0f / 9.0f,
                0.0f,
                2.0f / 9.0f,
                4.0f / 9.0f,
                0.0f,
                4.0f / 9.0f,
                4.0f / 9.0f,
                0.0f,
                6.0f / 9.0f,
                4.0f / 9.0f,
                0.0f,
                8.0f / 9.0f,
                4.0f / 9.0f,
                0.0f,
                -8.0f / 9.0f,
                6.0f / 9.0f,
                0.0f,
                -6.0f / 9.0f,
                6.0f / 9.0f,
                0.0f,
                -4.0f / 9.0f,
                6.0f / 9.0f,
                0.0f,
                -2.0f / 9.0f,
                6.0f / 9.0f,
                0.0f,
                0.0f,
                6.0f / 9.0f,
                0.0f,
                2.0f / 9.0f,
                6.0f / 9.0f,
                0.0f,
                4.0f / 9.0f,
                6.0f / 9.0f,
                0.0f,
                6.0f / 9.0f,
                6.0f / 9.0f,
                0.0f,
                8.0f / 9.0f,
                6.0f / 9.0f,
                0.0f,
                -8.0f / 9.0f,
                8.0f / 9.0f,
                0.0f,
                -6.0f / 9.0f,
                8.0f / 9.0f,
                0.0f,
                -4.0f / 9.0f,
                8.0f / 9.0f,
                0.0f,
                -2.0f / 9.0f,
                8.0f / 9.0f,
                0.0f,
                0.0f,
                8.0f / 9.0f,
                0.0f,
                2.0f / 9.0f,
                8.0f / 9.0f,
                0.0f,
                4.0f / 9.0f,
                8.0f / 9.0f,
                0.0f,
                6.0f / 9.0f,
                8.0f / 9.0f,
                0.0f,
                8.0f / 9.0f,
                8.0f / 9.0f,
                0.0f,
                -8.0f / 9.0f,
                -8.0f / 9.0f,
                2.0f / 9.0f,
                -6.0f / 9.0f,
                -8.0f / 9.0f,
                2.0f / 9.0f,
                -4.0f / 9.0f,
                -8.0f / 9.0f,
                2.0f / 9.0f,
                -2.0f / 9.0f,
                -8.0f / 9.0f,
                2.0f / 9.0f,
                0.0f,
                -8.0f / 9.0f,
                2.0f / 9.0f,
                2.0f / 9.0f,
                -8.0f / 9.0f,
                2.0f / 9.0f,
                4.0f / 9.0f,
                -8.0f / 9.0f,
                2.0f / 9.0f,
                6.0f / 9.0f,
                -8.0f / 9.0f,
                2.0f / 9.0f,
                8.0f / 9.0f,
                -8.0f / 9.0f,
                2.0f / 9.0f,
                -8.0f / 9.0f,
                -6.0f / 9.0f,
                2.0f / 9.0f,
                -6.0f / 9.0f,
                -6.0f / 9.0f,
                2.0f / 9.0f,
                -4.0f / 9.0f,
                -6.0f / 9.0f,
                2.0f / 9.0f,
                -2.0f / 9.0f,
                -6.0f / 9.0f,
                2.0f / 9.0f,
                0.0f,
                -6.0f / 9.0f,
                2.0f / 9.0f,
                2.0f / 9.0f,
                -6.0f / 9.0f,
                2.0f / 9.0f,
                4.0f / 9.0f,
                -6.0f / 9.0f,
                2.0f / 9.0f,
                6.0f / 9.0f,
                -6.0f / 9.0f,
                2.0f / 9.0f,
                8.0f / 9.0f,
                -6.0f / 9.0f,
                2.0f / 9.0f,
                -8.0f / 9.0f,
                -4.0f / 9.0f,
                2.0f / 9.0f,
                -6.0f / 9.0f,
                -4.0f / 9.0f,
                2.0f / 9.0f,
                -4.0f / 9.0f,
                -4.0f / 9.0f,
                2.0f / 9.0f,
                -2.0f / 9.0f,
                -4.0f / 9.0f,
                2.0f / 9.0f,
                0.0f,
                -4.0f / 9.0f,
                2.0f / 9.0f,
                2.0f / 9.0f,
                -4.0f / 9.0f,
                2.0f / 9.0f,
                4.0f / 9.0f,
                -4.0f / 9.0f,
                2.0f / 9.0f,
                6.0f / 9.0f,
                -4.0f / 9.0f,
                2.0f / 9.0f,
                8.0f / 9.0f,
                -4.0f / 9.0f,
                2.0f / 9.0f,
                -8.0f / 9.0f,
                -2.0f / 9.0f,
                2.0f / 9.0f,
                -6.0f / 9.0f,
                -2.0f / 9.0f,
                2.0f / 9.0f,
                -4.0f / 9.0f,
                -2.0f / 9.0f,
                2.0f / 9.0f,
                -2.0f / 9.0f,
                -2.0f / 9.0f,
                2.0f / 9.0f,
                0.0f,
                -2.0f / 9.0f,
                2.0f / 9.0f,
                2.0f / 9.0f,
                -2.0f / 9.0f,
                2.0f / 9.0f,
                4.0f / 9.0f,
                -2.0f / 9.0f,
                2.0f / 9.0f,
                6.0f / 9.0f,
                -2.0f / 9.0f,
                2.0f / 9.0f,
                8.0f / 9.0f,
                -2.0f / 9.0f,
                2.0f / 9.0f,
                -8.0f / 9.0f,
                0.0f,
                2.0f / 9.0f,
                -6.0f / 9.0f,
                0.0f,
                2.0f / 9.0f,
                -4.0f / 9.0f,
                0.0f,
                2.0f / 9.0f,
                -2.0f / 9.0f,
                0.0f,
                2.0f / 9.0f,
                0.0f,
                0.0f,
                2.0f / 9.0f,
                2.0f / 9.0f,
                0.0f,
                2.0f / 9.0f,
                4.0f / 9.0f,
                0.0f,
                2.0f / 9.0f,
                6.0f / 9.0f,
                0.0f,
                2.0f / 9.0f,
                8.0f / 9.0f,
                0.0f,
                2.0f / 9.0f,
                -8.0f / 9.0f,
                2.0f / 9.0f,
                2.0f / 9.0f,
                -6.0f / 9.0f,
                2.0f / 9.0f,
                2.0f / 9.0f,
                -4.0f / 9.0f,
                2.0f / 9.0f,
                2.0f / 9.0f,
                -2.0f / 9.0f,
                2.0f / 9.0f,
                2.0f / 9.0f,
                0.0f,
                2.0f / 9.0f,
                2.0f / 9.0f,
                2.0f / 9.0f,
                2.0f / 9.0f,
                2.0f / 9.0f,
                4.0f / 9.0f,
                2.0f / 9.0f,
                2.0f / 9.0f,
                6.0f / 9.0f,
                2.0f / 9.0f,
                2.0f / 9.0f,
                8.0f / 9.0f,
                2.0f / 9.0f,
                2.0f / 9.0f,
                -8.0f / 9.0f,
                4.0f / 9.0f,
                2.0f / 9.0f,
                -6.0f / 9.0f,
                4.0f / 9.0f,
                2.0f / 9.0f,
                -4.0f / 9.0f,
                4.0f / 9.0f,
                2.0f / 9.0f,
                -2.0f / 9.0f,
                4.0f / 9.0f,
                2.0f / 9.0f,
                0.0f,
                4.0f / 9.0f,
                2.0f / 9.0f,
                2.0f / 9.0f,
                4.0f / 9.0f,
                2.0f / 9.0f,
                4.0f / 9.0f,
                4.0f / 9.0f,
                2.0f / 9.0f,
                6.0f / 9.0f,
                4.0f / 9.0f,
                2.0f / 9.0f,
                8.0f / 9.0f,
                4.0f / 9.0f,
                2.0f / 9.0f,
                -8.0f / 9.0f,
                6.0f / 9.0f,
                2.0f / 9.0f,
                -6.0f / 9.0f,
                6.0f / 9.0f,
                2.0f / 9.0f,
                -4.0f / 9.0f,
                6.0f / 9.0f,
                2.0f / 9.0f,
                -2.0f / 9.0f,
                6.0f / 9.0f,
                2.0f / 9.0f,
                0.0f,
                6.0f / 9.0f,
                2.0f / 9.0f,
                2.0f / 9.0f,
                6.0f / 9.0f,
                2.0f / 9.0f,
                4.0f / 9.0f,
                6.0f / 9.0f,
                2.0f / 9.0f,
                6.0f / 9.0f,
                6.0f / 9.0f,
                2.0f / 9.0f,
                8.0f / 9.0f,
                6.0f / 9.0f,
                2.0f / 9.0f,
                -8.0f / 9.0f,
                8.0f / 9.0f,
                2.0f / 9.0f,
                -6.0f / 9.0f,
                8.0f / 9.0f,
                2.0f / 9.0f,
                -4.0f / 9.0f,
                8.0f / 9.0f,
                2.0f / 9.0f,
                -2.0f / 9.0f,
                8.0f / 9.0f,
                2.0f / 9.0f,
                0.0f,
                8.0f / 9.0f,
                2.0f / 9.0f,
                2.0f / 9.0f,
                8.0f / 9.0f,
                2.0f / 9.0f,
                4.0f / 9.0f,
                8.0f / 9.0f,
                2.0f / 9.0f,
                6.0f / 9.0f,
                8.0f / 9.0f,
                2.0f / 9.0f,
                8.0f / 9.0f,
                8.0f / 9.0f,
                2.0f / 9.0f,
                -8.0f / 9.0f,
                -8.0f / 9.0f,
                4.0f / 9.0f,
                -6.0f / 9.0f,
                -8.0f / 9.0f,
                4.0f / 9.0f,
                -4.0f / 9.0f,
                -8.0f / 9.0f,
                4.0f / 9.0f,
                -2.0f / 9.0f,
                -8.0f / 9.0f,
                4.0f / 9.0f,
                0.0f,
                -8.0f / 9.0f,
                4.0f / 9.0f,
                2.0f / 9.0f,
                -8.0f / 9.0f,
                4.0f / 9.0f,
                4.0f / 9.0f,
                -8.0f / 9.0f,
                4.0f / 9.0f,
                6.0f / 9.0f,
                -8.0f / 9.0f,
                4.0f / 9.0f,
                8.0f / 9.0f,
                -8.0f / 9.0f,
                4.0f / 9.0f,
                -8.0f / 9.0f,
                -6.0f / 9.0f,
                4.0f / 9.0f,
                -6.0f / 9.0f,
                -6.0f / 9.0f,
                4.0f / 9.0f,
                -4.0f / 9.0f,
                -6.0f / 9.0f,
                4.0f / 9.0f,
                -2.0f / 9.0f,
                -6.0f / 9.0f,
                4.0f / 9.0f,
                0.0f,
                -6.0f / 9.0f,
                4.0f / 9.0f,
                2.0f / 9.0f,
                -6.0f / 9.0f,
                4.0f / 9.0f,
                4.0f / 9.0f,
                -6.0f / 9.0f,
                4.0f / 9.0f,
                6.0f / 9.0f,
                -6.0f / 9.0f,
                4.0f / 9.0f,
                8.0f / 9.0f,
                -6.0f / 9.0f,
                4.0f / 9.0f,
                -8.0f / 9.0f,
                -4.0f / 9.0f,
                4.0f / 9.0f,
                -6.0f / 9.0f,
                -4.0f / 9.0f,
                4.0f / 9.0f,
                -4.0f / 9.0f,
                -4.0f / 9.0f,
                4.0f / 9.0f,
                -2.0f / 9.0f,
                -4.0f / 9.0f,
                4.0f / 9.0f,
                0.0f,
                -4.0f / 9.0f,
                4.0f / 9.0f,
                2.0f / 9.0f,
                -4.0f / 9.0f,
                4.0f / 9.0f,
                4.0f / 9.0f,
                -4.0f / 9.0f,
                4.0f / 9.0f,
                6.0f / 9.0f,
                -4.0f / 9.0f,
                4.0f / 9.0f,
                8.0f / 9.0f,
                -4.0f / 9.0f,
                4.0f / 9.0f,
                -8.0f / 9.0f,
                -2.0f / 9.0f,
                4.0f / 9.0f,
                -6.0f / 9.0f,
                -2.0f / 9.0f,
                4.0f / 9.0f,
                -4.0f / 9.0f,
                -2.0f / 9.0f,
                4.0f / 9.0f,
                -2.0f / 9.0f,
                -2.0f / 9.0f,
                4.0f / 9.0f,
                0.0f,
                -2.0f / 9.0f,
                4.0f / 9.0f,
                2.0f / 9.0f,
                -2.0f / 9.0f,
                4.0f / 9.0f,
                4.0f / 9.0f,
                -2.0f / 9.0f,
                4.0f / 9.0f,
                6.0f / 9.0f,
                -2.0f / 9.0f,
                4.0f / 9.0f,
                8.0f / 9.0f,
                -2.0f / 9.0f,
                4.0f / 9.0f,
                -8.0f / 9.0f,
                0.0f,
                4.0f / 9.0f,
                -6.0f / 9.0f,
                0.0f,
                4.0f / 9.0f,
                -4.0f / 9.0f,
                0.0f,
                4.0f / 9.0f,
                -2.0f / 9.0f,
                0.0f,
                4.0f / 9.0f,
                0.0f,
                0.0f,
                4.0f / 9.0f,
                2.0f / 9.0f,
                0.0f,
                4.0f / 9.0f,
                4.0f / 9.0f,
                0.0f,
                4.0f / 9.0f,
                6.0f / 9.0f,
                0.0f,
                4.0f / 9.0f,
                8.0f / 9.0f,
                0.0f,
                4.0f / 9.0f,
                -8.0f / 9.0f,
                2.0f / 9.0f,
                4.0f / 9.0f,
                -6.0f / 9.0f,
                2.0f / 9.0f,
                4.0f / 9.0f,
                -4.0f / 9.0f,
                2.0f / 9.0f,
                4.0f / 9.0f,
                -2.0f / 9.0f,
                2.0f / 9.0f,
                4.0f / 9.0f,
                0.0f,
                2.0f / 9.0f,
                4.0f / 9.0f,
                2.0f / 9.0f,
                2.0f / 9.0f,
                4.0f / 9.0f,
                4.0f / 9.0f,
                2.0f / 9.0f,
                4.0f / 9.0f,
                6.0f / 9.0f,
                2.0f / 9.0f,
                4.0f / 9.0f,
                8.0f / 9.0f,
                2.0f / 9.0f,
                4.0f / 9.0f,
                -8.0f / 9.0f,
                4.0f / 9.0f,
                4.0f / 9.0f,
                -6.0f / 9.0f,
                4.0f / 9.0f,
                4.0f / 9.0f,
                -4.0f / 9.0f,
                4.0f / 9.0f,
                4.0f / 9.0f,
                -2.0f / 9.0f,
                4.0f / 9.0f,
                4.0f / 9.0f,
                0.0f,
                4.0f / 9.0f,
                4.0f / 9.0f,
                2.0f / 9.0f,
                4.0f / 9.0f,
                4.0f / 9.0f,
                4.0f / 9.0f,
                4.0f / 9.0f,
                4.0f / 9.0f,
                6.0f / 9.0f,
                4.0f / 9.0f,
                4.0f / 9.0f,
                8.0f / 9.0f,
                4.0f / 9.0f,
                4.0f / 9.0f,
                -8.0f / 9.0f,
                6.0f / 9.0f,
                4.0f / 9.0f,
                -6.0f / 9.0f,
                6.0f / 9.0f,
                4.0f / 9.0f,
                -4.0f / 9.0f,
                6.0f / 9.0f,
                4.0f / 9.0f,
                -2.0f / 9.0f,
                6.0f / 9.0f,
                4.0f / 9.0f,
                0.0f,
                6.0f / 9.0f,
                4.0f / 9.0f,
                2.0f / 9.0f,
                6.0f / 9.0f,
                4.0f / 9.0f,
                4.0f / 9.0f,
                6.0f / 9.0f,
                4.0f / 9.0f,
                6.0f / 9.0f,
                6.0f / 9.0f,
                4.0f / 9.0f,
                8.0f / 9.0f,
                6.0f / 9.0f,
                4.0f / 9.0f,
                -8.0f / 9.0f,
                8.0f / 9.0f,
                4.0f / 9.0f,
                -6.0f / 9.0f,
                8.0f / 9.0f,
                4.0f / 9.0f,
                -4.0f / 9.0f,
                8.0f / 9.0f,
                4.0f / 9.0f,
                -2.0f / 9.0f,
                8.0f / 9.0f,
                4.0f / 9.0f,
                0.0f,
                8.0f / 9.0f,
                4.0f / 9.0f,
                2.0f / 9.0f,
                8.0f / 9.0f,
                4.0f / 9.0f,
                4.0f / 9.0f,
                8.0f / 9.0f,
                4.0f / 9.0f,
                6.0f / 9.0f,
                8.0f / 9.0f,
                4.0f / 9.0f,
                8.0f / 9.0f,
                8.0f / 9.0f,
                4.0f / 9.0f,
                -8.0f / 9.0f,
                -8.0f / 9.0f,
                6.0f / 9.0f,
                -6.0f / 9.0f,
                -8.0f / 9.0f,
                6.0f / 9.0f,
                -4.0f / 9.0f,
                -8.0f / 9.0f,
                6.0f / 9.0f,
                -2.0f / 9.0f,
                -8.0f / 9.0f,
                6.0f / 9.0f,
                0.0f,
                -8.0f / 9.0f,
                6.0f / 9.0f,
                2.0f / 9.0f,
                -8.0f / 9.0f,
                6.0f / 9.0f,
                4.0f / 9.0f,
                -8.0f / 9.0f,
                6.0f / 9.0f,
                6.0f / 9.0f,
                -8.0f / 9.0f,
                6.0f / 9.0f,
                8.0f / 9.0f,
                -8.0f / 9.0f,
                6.0f / 9.0f,
                -8.0f / 9.0f,
                -6.0f / 9.0f,
                6.0f / 9.0f,
                -6.0f / 9.0f,
                -6.0f / 9.0f,
                6.0f / 9.0f,
                -4.0f / 9.0f,
                -6.0f / 9.0f,
                6.0f / 9.0f,
                -2.0f / 9.0f,
                -6.0f / 9.0f,
                6.0f / 9.0f,
                0.0f,
                -6.0f / 9.0f,
                6.0f / 9.0f,
                2.0f / 9.0f,
                -6.0f / 9.0f,
                6.0f / 9.0f,
                4.0f / 9.0f,
                -6.0f / 9.0f,
                6.0f / 9.0f,
                6.0f / 9.0f,
                -6.0f / 9.0f,
                6.0f / 9.0f,
                8.0f / 9.0f,
                -6.0f / 9.0f,
                6.0f / 9.0f,
                -8.0f / 9.0f,
                -4.0f / 9.0f,
                6.0f / 9.0f,
                -6.0f / 9.0f,
                -4.0f / 9.0f,
                6.0f / 9.0f,
                -4.0f / 9.0f,
                -4.0f / 9.0f,
                6.0f / 9.0f,
                -2.0f / 9.0f,
                -4.0f / 9.0f,
                6.0f / 9.0f,
                0.0f,
                -4.0f / 9.0f,
                6.0f / 9.0f,
                2.0f / 9.0f,
                -4.0f / 9.0f,
                6.0f / 9.0f,
                4.0f / 9.0f,
                -4.0f / 9.0f,
                6.0f / 9.0f,
                6.0f / 9.0f,
                -4.0f / 9.0f,
                6.0f / 9.0f,
                8.0f / 9.0f,
                -4.0f / 9.0f,
                6.0f / 9.0f,
                -8.0f / 9.0f,
                -2.0f / 9.0f,
                6.0f / 9.0f,
                -6.0f / 9.0f,
                -2.0f / 9.0f,
                6.0f / 9.0f,
                -4.0f / 9.0f,
                -2.0f / 9.0f,
                6.0f / 9.0f,
                -2.0f / 9.0f,
                -2.0f / 9.0f,
                6.0f / 9.0f,
                0.0f,
                -2.0f / 9.0f,
                6.0f / 9.0f,
                2.0f / 9.0f,
                -2.0f / 9.0f,
                6.0f / 9.0f,
                4.0f / 9.0f,
                -2.0f / 9.0f,
                6.0f / 9.0f,
                6.0f / 9.0f,
                -2.0f / 9.0f,
                6.0f / 9.0f,
                8.0f / 9.0f,
                -2.0f / 9.0f,
                6.0f / 9.0f,
                -8.0f / 9.0f,
                0.0f,
                6.0f / 9.0f,
                -6.0f / 9.0f,
                0.0f,
                6.0f / 9.0f,
                -4.0f / 9.0f,
                0.0f,
                6.0f / 9.0f,
                -2.0f / 9.0f,
                0.0f,
                6.0f / 9.0f,
                0.0f,
                0.0f,
                6.0f / 9.0f,
                2.0f / 9.0f,
                0.0f,
                6.0f / 9.0f,
                4.0f / 9.0f,
                0.0f,
                6.0f / 9.0f,
                6.0f / 9.0f,
                0.0f,
                6.0f / 9.0f,
                8.0f / 9.0f,
                0.0f,
                6.0f / 9.0f,
                -8.0f / 9.0f,
                2.0f / 9.0f,
                6.0f / 9.0f,
                -6.0f / 9.0f,
                2.0f / 9.0f,
                6.0f / 9.0f,
                -4.0f / 9.0f,
                2.0f / 9.0f,
                6.0f / 9.0f,
                -2.0f / 9.0f,
                2.0f / 9.0f,
                6.0f / 9.0f,
                0.0f,
                2.0f / 9.0f,
                6.0f / 9.0f,
                2.0f / 9.0f,
                2.0f / 9.0f,
                6.0f / 9.0f,
                4.0f / 9.0f,
                2.0f / 9.0f,
                6.0f / 9.0f,
                6.0f / 9.0f,
                2.0f / 9.0f,
                6.0f / 9.0f,
                8.0f / 9.0f,
                2.0f / 9.0f,
                6.0f / 9.0f,
                -8.0f / 9.0f,
                4.0f / 9.0f,
                6.0f / 9.0f,
                -6.0f / 9.0f,
                4.0f / 9.0f,
                6.0f / 9.0f,
                -4.0f / 9.0f,
                4.0f / 9.0f,
                6.0f / 9.0f,
                -2.0f / 9.0f,
                4.0f / 9.0f,
                6.0f / 9.0f,
                0.0f,
                4.0f / 9.0f,
                6.0f / 9.0f,
                2.0f / 9.0f,
                4.0f / 9.0f,
                6.0f / 9.0f,
                4.0f / 9.0f,
                4.0f / 9.0f,
                6.0f / 9.0f,
                6.0f / 9.0f,
                4.0f / 9.0f,
                6.0f / 9.0f,
                8.0f / 9.0f,
                4.0f / 9.0f,
                6.0f / 9.0f,
                -8.0f / 9.0f,
                6.0f / 9.0f,
                6.0f / 9.0f,
                -6.0f / 9.0f,
                6.0f / 9.0f,
                6.0f / 9.0f,
                -4.0f / 9.0f,
                6.0f / 9.0f,
                6.0f / 9.0f,
                -2.0f / 9.0f,
                6.0f / 9.0f,
                6.0f / 9.0f,
                0.0f,
                6.0f / 9.0f,
                6.0f / 9.0f,
                2.0f / 9.0f,
                6.0f / 9.0f,
                6.0f / 9.0f,
                4.0f / 9.0f,
                6.0f / 9.0f,
                6.0f / 9.0f,
                6.0f / 9.0f,
                6.0f / 9.0f,
                6.0f / 9.0f,
                8.0f / 9.0f,
                6.0f / 9.0f,
                6.0f / 9.0f,
                -8.0f / 9.0f,
                8.0f / 9.0f,
                6.0f / 9.0f,
                -6.0f / 9.0f,
                8.0f / 9.0f,
                6.0f / 9.0f,
                -4.0f / 9.0f,
                8.0f / 9.0f,
                6.0f / 9.0f,
                -2.0f / 9.0f,
                8.0f / 9.0f,
                6.0f / 9.0f,
                0.0f,
                8.0f / 9.0f,
                6.0f / 9.0f,
                2.0f / 9.0f,
                8.0f / 9.0f,
                6.0f / 9.0f,
                4.0f / 9.0f,
                8.0f / 9.0f,
                6.0f / 9.0f,
                6.0f / 9.0f,
                8.0f / 9.0f,
                6.0f / 9.0f,
                8.0f / 9.0f,
                8.0f / 9.0f,
                6.0f / 9.0f,
                -8.0f / 9.0f,
                -8.0f / 9.0f,
                8.0f / 9.0f,
                -6.0f / 9.0f,
                -8.0f / 9.0f,
                8.0f / 9.0f,
                -4.0f / 9.0f,
                -8.0f / 9.0f,
                8.0f / 9.0f,
                -2.0f / 9.0f,
                -8.0f / 9.0f,
                8.0f / 9.0f,
                0.0f,
                -8.0f / 9.0f,
                8.0f / 9.0f,
                2.0f / 9.0f,
                -8.0f / 9.0f,
                8.0f / 9.0f,
                4.0f / 9.0f,
                -8.0f / 9.0f,
                8.0f / 9.0f,
                6.0f / 9.0f,
                -8.0f / 9.0f,
                8.0f / 9.0f,
                8.0f / 9.0f,
                -8.0f / 9.0f,
                8.0f / 9.0f,
                -8.0f / 9.0f,
                -6.0f / 9.0f,
                8.0f / 9.0f,
                -6.0f / 9.0f,
                -6.0f / 9.0f,
                8.0f / 9.0f,
                -4.0f / 9.0f,
                -6.0f / 9.0f,
                8.0f / 9.0f,
                -2.0f / 9.0f,
                -6.0f / 9.0f,
                8.0f / 9.0f,
                0.0f,
                -6.0f / 9.0f,
                8.0f / 9.0f,
                2.0f / 9.0f,
                -6.0f / 9.0f,
                8.0f / 9.0f,
                4.0f / 9.0f,
                -6.0f / 9.0f,
                8.0f / 9.0f,
                6.0f / 9.0f,
                -6.0f / 9.0f,
                8.0f / 9.0f,
                8.0f / 9.0f,
                -6.0f / 9.0f,
                8.0f / 9.0f,
                -8.0f / 9.0f,
                -4.0f / 9.0f,
                8.0f / 9.0f,
                -6.0f / 9.0f,
                -4.0f / 9.0f,
                8.0f / 9.0f,
                -4.0f / 9.0f,
                -4.0f / 9.0f,
                8.0f / 9.0f,
                -2.0f / 9.0f,
                -4.0f / 9.0f,
                8.0f / 9.0f,
                0.0f,
                -4.0f / 9.0f,
                8.0f / 9.0f,
                2.0f / 9.0f,
                -4.0f / 9.0f,
                8.0f / 9.0f,
                4.0f / 9.0f,
                -4.0f / 9.0f,
                8.0f / 9.0f,
                6.0f / 9.0f,
                -4.0f / 9.0f,
                8.0f / 9.0f,
                8.0f / 9.0f,
                -4.0f / 9.0f,
                8.0f / 9.0f,
                -8.0f / 9.0f,
                -2.0f / 9.0f,
                8.0f / 9.0f,
                -6.0f / 9.0f,
                -2.0f / 9.0f,
                8.0f / 9.0f,
                -4.0f / 9.0f,
                -2.0f / 9.0f,
                8.0f / 9.0f,
                -2.0f / 9.0f,
                -2.0f / 9.0f,
                8.0f / 9.0f,
                0.0f,
                -2.0f / 9.0f,
                8.0f / 9.0f,
                2.0f / 9.0f,
                -2.0f / 9.0f,
                8.0f / 9.0f,
                4.0f / 9.0f,
                -2.0f / 9.0f,
                8.0f / 9.0f,
                6.0f / 9.0f,
                -2.0f / 9.0f,
                8.0f / 9.0f,
                8.0f / 9.0f,
                -2.0f / 9.0f,
                8.0f / 9.0f,
                -8.0f / 9.0f,
                0.0f,
                8.0f / 9.0f,
                -6.0f / 9.0f,
                0.0f,
                8.0f / 9.0f,
                -4.0f / 9.0f,
                0.0f,
                8.0f / 9.0f,
                -2.0f / 9.0f,
                0.0f,
                8.0f / 9.0f,
                0.0f,
                0.0f,
                8.0f / 9.0f,
                2.0f / 9.0f,
                0.0f,
                8.0f / 9.0f,
                4.0f / 9.0f,
                0.0f,
                8.0f / 9.0f,
                6.0f / 9.0f,
                0.0f,
                8.0f / 9.0f,
                8.0f / 9.0f,
                0.0f,
                8.0f / 9.0f,
                -8.0f / 9.0f,
                2.0f / 9.0f,
                8.0f / 9.0f,
                -6.0f / 9.0f,
                2.0f / 9.0f,
                8.0f / 9.0f,
                -4.0f / 9.0f,
                2.0f / 9.0f,
                8.0f / 9.0f,
                -2.0f / 9.0f,
                2.0f / 9.0f,
                8.0f / 9.0f,
                0.0f,
                2.0f / 9.0f,
                8.0f / 9.0f,
                2.0f / 9.0f,
                2.0f / 9.0f,
                8.0f / 9.0f,
                4.0f / 9.0f,
                2.0f / 9.0f,
                8.0f / 9.0f,
                6.0f / 9.0f,
                2.0f / 9.0f,
                8.0f / 9.0f,
                8.0f / 9.0f,
                2.0f / 9.0f,
                8.0f / 9.0f,
                -8.0f / 9.0f,
                4.0f / 9.0f,
                8.0f / 9.0f,
                -6.0f / 9.0f,
                4.0f / 9.0f,
                8.0f / 9.0f,
                -4.0f / 9.0f,
                4.0f / 9.0f,
                8.0f / 9.0f,
                -2.0f / 9.0f,
                4.0f / 9.0f,
                8.0f / 9.0f,
                0.0f,
                4.0f / 9.0f,
                8.0f / 9.0f,
                2.0f / 9.0f,
                4.0f / 9.0f,
                8.0f / 9.0f,
                4.0f / 9.0f,
                4.0f / 9.0f,
                8.0f / 9.0f,
                6.0f / 9.0f,
                4.0f / 9.0f,
                8.0f / 9.0f,
                8.0f / 9.0f,
                4.0f / 9.0f,
                8.0f / 9.0f,
                -8.0f / 9.0f,
                6.0f / 9.0f,
                8.0f / 9.0f,
                -6.0f / 9.0f,
                6.0f / 9.0f,
                8.0f / 9.0f,
                -4.0f / 9.0f,
                6.0f / 9.0f,
                8.0f / 9.0f,
                -2.0f / 9.0f,
                6.0f / 9.0f,
                8.0f / 9.0f,
                0.0f,
                6.0f / 9.0f,
                8.0f / 9.0f,
                2.0f / 9.0f,
                6.0f / 9.0f,
                8.0f / 9.0f,
                4.0f / 9.0f,
                6.0f / 9.0f,
                8.0f / 9.0f,
                6.0f / 9.0f,
                6.0f / 9.0f,
                8.0f / 9.0f,
                8.0f / 9.0f,
                6.0f / 9.0f,
                8.0f / 9.0f,
                -8.0f / 9.0f,
                8.0f / 9.0f,
                8.0f / 9.0f,
                -6.0f / 9.0f,
                8.0f / 9.0f,
                8.0f / 9.0f,
                -4.0f / 9.0f,
                8.0f / 9.0f,
                8.0f / 9.0f,
                -2.0f / 9.0f,
                8.0f / 9.0f,
                8.0f / 9.0f,
                0.0f,
                8.0f / 9.0f,
                8.0f / 9.0f,
                2.0f / 9.0f,
                8.0f / 9.0f,
                8.0f / 9.0f,
                4.0f / 9.0f,
                8.0f / 9.0f,
                8.0f / 9.0f,
                6.0f / 9.0f,
                8.0f / 9.0f,
                8.0f / 9.0f,
                8.0f / 9.0f,
                8.0f / 9.0f,
                8.0f / 9.0f
            )

            // data taken from ISO/IEC DIS 11172, Annexes 3-B.2[abcd] and 3-B.4:
            // subbands 0-2 in tables 3-B.2a and 2b: (index is allocation)
            val table_ab1_codelength: IntArray =  // bits per codeword
                intArrayOf(0, 5, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)

            val table_ab1_groupingtables: Array<FloatArray?> =
                // pointer to sample grouping table, or NULL-pointer if ungrouped
                arrayOf(
                    null,
                    grouping_5bits,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null
                )

            val table_ab1_factor: FloatArray =
                // factor for requantization: (real)sample * factor - 1.0 gives requantized sample
                floatArrayOf(
                    0.0f,
                    1.0f / 2.0f,
                    1.0f / 4.0f,
                    1.0f / 8.0f,
                    1.0f / 16.0f,
                    1.0f / 32.0f,
                    1.0f / 64.0f,
                    1.0f / 128.0f,
                    1.0f / 256.0f,
                    1.0f / 512.0f,
                    1.0f / 1024.0f,
                    1.0f / 2048.0f,
                    1.0f / 4096.0f,
                    1.0f / 8192.0f,
                    1.0f / 16384.0f,
                    1.0f / 32768.0f
                )

            val table_ab1_c: FloatArray =
                floatArrayOf(
                    0.0f,
                    1.3333334f,
                    1.1428572f,
                    1.0666667f,
                    1.032258f,
                    1.0158731f,
                    1.007874f,
                    1.0039216f,
                    1.0019569f,
                    1.0009775f,
                    1.0004885f,
                    1.0002443f,
                    1.0001221f,
                    1.000061f,
                    1.0000305f,
                    1.0000153f
                )

            val table_ab1_d: FloatArray =
                floatArrayOf(
                    0.0f,
                    0.50000000000f,
                    0.25000000000f,
                    0.12500000000f,
                    0.06250000000f,
                    0.03125000000f,
                    0.01562500000f,
                    0.00781250000f,
                    0.00390625000f,
                    0.00195312500f,
                    0.00097656250f,
                    0.00048828125f,
                    2.4414062E-4f,
                    0.00012207031f,
                    0.00006103516f,
                    0.00003051758f
                )

            // subbands 3-... tables 3-B.2a and 2b:
            val table_ab234_groupingtables: Array<FloatArray?> = arrayOf(
                null, grouping_5bits, grouping_7bits, null, grouping_10bits,
                null, null, null, null, null, null, null, null, null, null, null
            )

            // subbands 3-10 in tables 3-B.2a and 2b:
            val table_ab2_codelength: IntArray = intArrayOf(0, 5, 7, 3, 10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16)
            val table_ab2_factor: FloatArray = floatArrayOf(
                0.0f,
                1.0f / 2.0f,
                1.0f / 4.0f,
                1.0f / 4.0f,
                1.0f / 8.0f,
                1.0f / 8.0f,
                1.0f / 16.0f,
                1.0f / 32.0f,
                1.0f / 64.0f,
                1.0f / 128.0f,
                1.0f / 256.0f,
                1.0f / 512.0f,
                1.0f / 1024.0f,
                1.0f / 2048.0f,
                1.0f / 4096.0f,
                1.0f / 32768.0f
            )
            val table_ab2_c: FloatArray = floatArrayOf(
                0.0f,
                1.3333334f,
                1.60000000000f,
                1.1428572f,
                1.7777778f,
                1.0666667f,
                1.032258f,
                1.0158731f,
                1.007874f,
                1.0039216f,
                1.0019569f,
                1.0009775f,
                1.0004885f,
                1.0002443f,
                1.0001221f,
                1.0000153f
            )
            val table_ab2_d: FloatArray = floatArrayOf(
                0.0f,
                0.50000000000f,
                0.50000000000f,
                0.25000000000f,
                0.50000000000f,
                0.12500000000f,
                0.06250000000f,
                0.03125000000f,
                0.01562500000f,
                0.00781250000f,
                0.00390625000f,
                0.00195312500f,
                0.00097656250f,
                0.00048828125f,
                2.4414062E-4f,
                0.00003051758f
            )

            val table_ab3_codelength: IntArray = intArrayOf(0, 5, 7, 3, 10, 4, 5, 16)
            val table_ab3_factor: FloatArray = floatArrayOf(
                0.0f, 1.0f / 2.0f, 1.0f / 4.0f, 1.0f / 4.0f, 1.0f / 8.0f, 1.0f / 8.0f,
                1.0f / 16.0f, 1.0f / 32768.0f
            )
            val table_ab3_c: FloatArray = floatArrayOf(
                0.0f, 1.3333334f, 1.60000000000f, 1.1428572f, 1.7777778f,
                1.0666667f, 1.032258f, 1.0000153f
            )
            val table_ab3_d: FloatArray = floatArrayOf(
                0.0f, 0.50000000000f, 0.50000000000f, 0.25000000000f, 0.50000000000f,
                0.12500000000f, 0.06250000000f, 0.00003051758f
            )

            // subbands 23-... in tables 3-B.2a and 2b:
            val table_ab4_codelength: IntArray = intArrayOf(0, 5, 7, 16)
            val table_ab4_factor: FloatArray = floatArrayOf(0.0f, 1.0f / 2.0f, 1.0f / 4.0f, 1.0f / 32768.0f)
            val table_ab4_c: FloatArray = floatArrayOf(0.0f, 1.3333334f, 1.60000000000f, 1.0000153f)
            val table_ab4_d: FloatArray = floatArrayOf(0.0f, 0.50000000000f, 0.50000000000f, 0.00003051758f)

            // subbands in tables 3-B.2c and 2d:
            val table_cd_codelength: IntArray = intArrayOf(0, 5, 7, 10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
            val table_cd_groupingtables: Array<FloatArray?> = arrayOf(
                null, grouping_5bits, grouping_7bits, grouping_10bits, null, null,
                null, null, null, null, null, null, null, null, null, null
            )
            val table_cd_factor: FloatArray = floatArrayOf(
                0.0f,
                1.0f / 2.0f,
                1.0f / 4.0f,
                1.0f / 8.0f,
                1.0f / 8.0f,
                1.0f / 16.0f,
                1.0f / 32.0f,
                1.0f / 64.0f,
                1.0f / 128.0f,
                1.0f / 256.0f,
                1.0f / 512.0f,
                1.0f / 1024.0f,
                1.0f / 2048.0f,
                1.0f / 4096.0f,
                1.0f / 8192.0f,
                1.0f / 16384.0f
            )
            val table_cd_c: FloatArray = floatArrayOf(
                0.0f,
                1.3333334f,
                1.60000000000f,
                1.7777778f,
                1.0666667f,
                1.032258f,
                1.0158731f,
                1.007874f,
                1.0039216f,
                1.0019569f,
                1.0009775f,
                1.0004885f,
                1.0002443f,
                1.0001221f,
                1.000061f,
                1.0000305f
            )
            val table_cd_d: FloatArray = floatArrayOf(
                0.0f,
                0.50000000000f,
                0.50000000000f,
                0.50000000000f,
                0.12500000000f,
                0.06250000000f,
                0.03125000000f,
                0.01562500000f,
                0.00781250000f,
                0.00390625000f,
                0.00195312500f,
                0.00097656250f,
                0.00048828125f,
                2.4414062E-4f,
                0.00012207031f,
                0.00006103516f
            )
        }
    }

    internal open class SubbandLayer2IntensityStereo(subNumber: Int) : SubbandLayer2(subNumber) {
        private var channel2Scfsi: Int = 0
        private var channel2Scalefactor1: Float = 0f
        private var channel2Scalefactor2: Float = 0f
        private var channel2Scalefactor3: Float = 0f

        override fun readScalefactorSelection(stream: Bitstream, crc: Crc16) {
            if (allocation != 0) {
                scfsi = stream.get_bits(2)
                channel2Scfsi = stream.get_bits(2)
                crc.addBits(scfsi, 2)
                crc.addBits(channel2Scfsi, 2)
            }
        }

        override fun readScalefactor(stream: Bitstream, header: Header) {
            if (allocation != 0) {
                super.readScalefactor(stream, header)
                when (channel2Scfsi) {
                    0 -> {
                        channel2Scalefactor1 = scalefactors[stream.get_bits(6)]
                        channel2Scalefactor2 = scalefactors[stream.get_bits(6)]
                        channel2Scalefactor3 = scalefactors[stream.get_bits(6)]
                    }

                    1 -> {
                        channel2Scalefactor2 = scalefactors[stream.get_bits(6)]
                        channel2Scalefactor1 = channel2Scalefactor2
                        channel2Scalefactor3 = scalefactors[stream.get_bits(6)]
                    }

                    2 -> {
                        channel2Scalefactor3 = scalefactors[stream.get_bits(6)]
                        channel2Scalefactor2 = channel2Scalefactor3
                        channel2Scalefactor1 = channel2Scalefactor2
                    }

                    3 -> {
                        channel2Scalefactor1 = scalefactors[stream.get_bits(6)]
                        channel2Scalefactor3 = scalefactors[stream.get_bits(6)]
                        channel2Scalefactor2 = channel2Scalefactor3
                    }
                }
            }
        }

        override fun putNextSample(channels: Int, filter1: SynthesisFilter, filter2: SynthesisFilter): Boolean {
            if (allocation != 0) {
                var sample = samples[samplenumber]

                if (groupingtable[0] == null) sample = (sample + d[0]) * c[0]
                when (channels) {
                    OutputChannels.BOTH_CHANNELS -> {
                        var sample2 = sample
                        when {
                            groupnumber <= 4 -> {
                                sample *= scalefactor1
                                sample2 *= channel2Scalefactor1
                            }

                            groupnumber <= 8 -> {
                                sample *= scalefactor2
                                sample2 *= channel2Scalefactor2
                            }

                            else -> {
                                sample *= scalefactor3
                                sample2 *= channel2Scalefactor3
                            }
                        }
                        filter1.inputSample(sample, subbandnumber)
                        filter2.inputSample(sample2, subbandnumber)
                    }

                    OutputChannels.LEFT_CHANNEL -> {
                        sample *= when {
                            groupnumber <= 4 -> scalefactor1
                            groupnumber <= 8 -> scalefactor2
                            else -> scalefactor3
                        }
                        filter1.inputSample(sample, subbandnumber)
                    }

                    else -> {
                        sample *= when {
                            groupnumber <= 4 -> channel2Scalefactor1
                            groupnumber <= 8 -> channel2Scalefactor2
                            else -> channel2Scalefactor3
                        }
                        filter1.inputSample(sample, subbandnumber)
                    }
                }
            }

            return ++samplenumber == 3
        }
    }

    internal open class SubbandLayer2Stereo(subNumber: Int) : SubbandLayer2(subNumber) {
        private var channel2Allocation: Int = 0
        private var channel2Scfsi: Int = 0
        private var channel2Scalefactor1: Float = 0f
        private var channel2Scalefactor2: Float = 0f
        private var channel2Scalefactor3: Float = 0f
        private var channel2Codelength: IntArray = intArrayOf(0)
        private var channel2Factor: FloatArray = floatArrayOf(0f)
        private var channel2Samples: FloatArray = FloatArray(3)
        private var channel2C: FloatArray = floatArrayOf(0f)
        private var channel2D: FloatArray = floatArrayOf(0f)

        override fun readAllocation(stream: Bitstream, header: Header, crc: Crc16) {
            val length = getAllocationlength(header)
            allocation = stream.get_bits(length)
            channel2Allocation = stream.get_bits(length)
            crc.addBits(allocation, length)
            crc.addBits(channel2Allocation, length)
        }

        override fun readScalefactorSelection(stream: Bitstream, crc: Crc16) {
            if (allocation != 0) {
                scfsi = stream.get_bits(2)
                crc.addBits(scfsi, 2)
            }
            if (channel2Allocation != 0) {
                channel2Scfsi = stream.get_bits(2)
                crc.addBits(channel2Scfsi, 2)
            }
        }

        override fun readScalefactor(stream: Bitstream, header: Header) {
            super.readScalefactor(stream, header)
            if (channel2Allocation != 0) {
                when (channel2Scfsi) {
                    0 -> {
                        channel2Scalefactor1 = scalefactors[stream.get_bits(6)]
                        channel2Scalefactor2 = scalefactors[stream.get_bits(6)]
                        channel2Scalefactor3 = scalefactors[stream.get_bits(6)]
                    }

                    1 -> {
                        channel2Scalefactor2 = scalefactors[stream.get_bits(6)]
                        channel2Scalefactor1 = channel2Scalefactor2
                        channel2Scalefactor3 = scalefactors[stream.get_bits(6)]
                    }

                    2 -> {
                        channel2Scalefactor3 = scalefactors[stream.get_bits(6)]
                        channel2Scalefactor2 = channel2Scalefactor3
                        channel2Scalefactor1 = channel2Scalefactor2
                    }

                    3 -> {
                        channel2Scalefactor1 = scalefactors[stream.get_bits(6)]
                        channel2Scalefactor3 = scalefactors[stream.get_bits(6)]
                        channel2Scalefactor2 = channel2Scalefactor3
                    }
                }
                prepareSampleReading(
                    header,
                    channel2Allocation,
                    1,
                    channel2Factor,
                    channel2Codelength,
                    channel2C,
                    channel2D
                )
            }
        }

        override fun readSampleData(stream: Bitstream): Boolean {
            val returnvalue = super.readSampleData(stream)

            if (channel2Allocation != 0) if (groupingtable[1] != null) {
                var samplecode = stream.get_bits(channel2Codelength[0])
                samplecode += samplecode shl 1

                val target = channel2Samples
                val source = groupingtable[1]
                var tmp = 0
                var temp = samplecode
                target[tmp] = source!![temp]
                temp++
                tmp++
                target[tmp] = source[temp]
                temp++
                tmp++
                target[tmp] = source[temp]
            } else {
                channel2Samples[0] = (stream.get_bits(channel2Codelength[0]) * channel2Factor[0] - 1.0).toFloat()
                channel2Samples[1] = (stream.get_bits(channel2Codelength[0]) * channel2Factor[0] - 1.0).toFloat()
                channel2Samples[2] = (stream.get_bits(channel2Codelength[0]) * channel2Factor[0] - 1.0).toFloat()
            }
            return returnvalue
        }

        override fun putNextSample(channels: Int, filter1: SynthesisFilter, filter2: SynthesisFilter): Boolean {
            val returnvalue = super.putNextSample(channels, filter1, filter2)
            if (channel2Allocation != 0 && channels != OutputChannels.LEFT_CHANNEL) {
                var sample = channel2Samples[samplenumber - 1]

                if (groupingtable[1] == null) sample = (sample + channel2D[0]) * channel2C[0]

                sample *= if (groupnumber <= 4) channel2Scalefactor1
                else if (groupnumber <= 8) channel2Scalefactor2
                else channel2Scalefactor3
                if (channels == OutputChannels.BOTH_CHANNELS) filter2.inputSample(sample, subbandnumber)
                else filter1.inputSample(sample, subbandnumber)
            }
            return returnvalue
        }
    }
}
